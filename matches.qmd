---
title: "Matches"
format:
  html:
    theme: cosmo
    toc: false
page-layout: full
title-block-banner: false
freeze: false
---

```{r prep, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(plotly)
library(reactable)
library(htmltools)
library(reactablefmtr)
df <- readxl::read_excel("Export_TDL_NED_2223.xlsx", 
                   sheet = "Wedstrijden") %>% 
mutate(match = glue::glue("{HomeName} - {AwayName}"))  %>%
  mutate(home_win_prob = as.numeric(sub("%","",home_win_prob))) %>%
  mutate(draw_prob = as.numeric(sub("%","",draw_prob))) %>%
  mutate(away_win_prob = as.numeric(sub("%","",away_win_prob))) 

df_long <-
  df %>%
  select(match,home_win_prob,draw_prob,away_win_prob) %>%
  reshape2::melt(id.var = c("match")) 
``` 

```{r prep3, echo=FALSE, message=FALSE, warning=FALSE}
df_long$variable <- factor(df_long$variable, levels=c("away_win_prob","draw_prob","home_win_prob"))
triple_bar <- function(df_in){
  df_in %>% ggplot(aes(x = .data$x, y = factor(.data$y), text=.data$x,
                                                          fill = I(.data$fill), group = .data$y)) + 
                                       geom_col(position = "fill", 
                                      color = "white", size = .5) +
                             geom_text(size = 3, position = position_fill(vjust = 0.5),
                                       family = "roboto",
                                         color = c("black", "black","white"),
                                       aes(label = ifelse(x>15,
                                                          glue::glue("{round(.data$x,1)}%"),"")) )+
                             scale_fill_manual(values = c("#488286","#DBB4AD","#A60067")) +
                             labs(y="",x="") +
                             theme_minimal() +
                               scale_x_continuous(expand = c(0,0),limits = NULL) +
                               scale_y_discrete(expand = c(0, 0)) + 
                               coord_cartesian(clip = "off") +
                             theme(legend.position = "none",
                                   axis.text=element_blank(),
                                   axis.ticks=element_blank(),
                                   plot.margin=grid::unit(c(0,0,0,0), "mm")
                                   )
}


```

```{r plot, echo=FALSE, message=FALSE, warning=FALSE}
tbl <- reactable::reactable(df %>%
                              select(-c(home_win_prob,draw_prob,away_win_prob)) %>%
                              mutate(date = as.Date(date,"%d-%m-%Y")), 
                     theme = reactableTheme(
                       # Vertically center cells
                   
                       cellStyle = list(display = "flex", flexDirection = "column", justifyContent = "center")
                     ),
                       defaultColDef = colDef(
               # format = colFormat(digits = 2),
                align="center",
                
              ),
                     columns = list(
                       match = reactable::colDef(
                         name = "Home Win | Draw | Away Win",
                         width=250,
                         cell = function(value2){
                         
                         subDB <- df_long %>% filter(match == value2) %>%
                           arrange(rev(variable))
                         
                         df_in <- dplyr::tibble(x = subDB$value, y = rep(1, 3), 
                                                fill = c("#488286","#A60067","#DBB4AD"))
                         #print(df_in)
                        
                         p<-ggplotly(tooltip = "text",
                                     triple_bar(df_in),
                           height = 50
                           
                         )  %>% config(displayModeBar = F)
                         return(p)
                       })
                     ))



div(class = "standings",
  div(class = "title",
    h2("Played Matches Eredivisie 2022/2023"),
    "Unfold a match for more information"
  ),
  tbl
)

```


```{css,echo=FALSE}
.standings {
  font-family: Karla, "Roboto", Helvetica, Arial, sans-serif;
  font-size: 14px;
}

.title {
  margin: 18px 0;
  font-size: 5;
}

.title h2 {
  font-size: 2;
  font-weight: 600;
}

.standings-table {
  margin-bottom: 20px;
}

/* Align header text to the bottom */
.header,
.group-header {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}

.header {
  border-bottom-color: #555;
  font-size: 13px;
  font-weight: 400;
  text-transform: uppercase;
}

/* Highlight headers when sorting */
.header:hover,
.header[aria-sort="ascending"],
.header[aria-sort="descending"] {
  background-color: #eee;
}

.border-left {
  border-left: 2px solid #555;
}

/* Use box-shadow to create row borders that appear behind vertical borders */
.cell {
  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);
}

.group-last .cell {
  box-shadow: inset 0 -2px 0 #555;
}

.team {
  display: flex;
  align-items: baseline;
}

.record {
  margin-left: 5px;
  color: #999;
  font-size: 13px;
}

.team-name {
  font-size: 18px;
  font-weight: 700;
}

.flag {
  margin-right: 8px;
  height: 21px;
  border: 1px solid #f0f0f0;
}

.group {
  font-size: 19px;
}

.number {
  font-family: "Fira Mono", Consolas, Monaco, monospace;
  font-size: 16px;
  line-height: 30px;
  white-space: pre;
}

.spi-rating {
  width: 20px;
  height: 20px;
  border: 1px solid rgba(0, 0, 0, 0.03);
  border-radius: 50%;
text-align: center;
  align-item: right;
   margin-left: 15px;
#  color: #000;
  font-size: 13px;
 # letter-spacing: -2px;
}
```


```{css echo=FALSE}
/* rmarkdown html documents */
.main-container {
  max-width: 1035px !important;
  font-family: 'Roboto', sans-serif;
  font-size: 10px;
    height: 20px;
}

h1.title {
  display: none;
}

/* pkgdown articles */
.contents {
  width: 1060px;
}

.page-header {
  display: none;
}
```