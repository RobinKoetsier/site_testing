---
title: "xPoints"
format:
  html:
    code-tools:
      source: https://github.com/RobinKoetsier/temp/blob/master/twitter/xPoints.R
    theme: cosmo
    toc: true
    code-link: true
    freeze: true
execute:
  cache: true
date: 2022-10-18
description: "Calculate the expected points yourself with the worldfootballR package"
image: "img/0.png"
---
### INTRO

Now that expected goals get more common and accepted, more people are realising that it is mostly for rating a teams performance over more matches. Because some matches will skew the xG of a team, we can use expected points to see how well they perform against there underlying numbers. To read more about expected points an how we calculate it, [you can read this article from me.]("https://www.gettingbluefingers.com/posts/2021-03-03_expected-points/") In short: we look at the size of the chances to see how much points a team deserved in a match instead of only looking at the total xG.

### LOADING THE PACKAGES

Make sure you have the newest version of <code>worldfootballR</code>.
```{r, eval=FALSE}
#| output: false
# devtools::install_github("JaseZiv/worldfootballR")
library(tidyverse)
library(worldfootballR)
```

### GETTING THE MATCH DATA

As we are simulating every shot in every match multiple times, we need to load all the shots from the competition we want to use. 

```{r, eval=FALSE}
#get match id's
league_matches <- fotmob_get_league_matches(
  country =     "ENG",
  league_name = "Championship"
) 

#filter out matches in the future
league_matches <- league_matches %>%
  filter(league_matches$status$reason$short == "FT") 

#get matches for those id's
match_details <- fotmob_get_match_details(league_matches$id)
```


```{r, eval=FALSE}
# unnest the shots only needed in older versions of worldfootballR so commented it out) 
# and add team name of team shooting and team conceding (
shots_temp <- match_details %>%
  #unnest(shots) %>%
  mutate(team_name = case_when(team_id == home_team_id ~ home_team,
                              team_id == away_team_id ~ away_team),
         opponent = case_when(team_id == home_team_id ~ away_team,
                              team_id == away_team_id ~ home_team))

```

If you want all the leagues and their id's/names/countries, read the csv from github

```{r, eval=FALSE}
leagues <- read.csv("https://raw.githubusercontent.com/JaseZiv/worldfootballR_data/master/raw-data/fotmob-leagues/all_leagues.csv")
head(leagues)
```

View the data frame and search in it!

### TABLE WITH XG PER TEAM

First we make a table with the xG for and against of every team. This is also possible through <code>{worldfootballR}</code>, but the function doesn't work at the moment.

<details>
<summary>Function that currently doesn't work</summary>
```{.r}
ere_team_xg_2022 <- fotmob_get_season_stats(
  league_id = 48, #48 is the code for the Championship
  season_name = "2022/2023",
  stat_name = "Expected goals",
  team_or_player = "team"
)
```
</details>

```{r, eval=FALSE}
xG_table <- shots_temp %>%
  mutate(expected_goals = replace_na(expected_goals,0)) %>% #replace the NA for own goals to 0
  group_by(team_name) %>%
  summarise(xGF = sum(expected_goals)) %>% #xG for
  left_join(shots_temp %>% #join with xG against
  mutate(expected_goals = replace_na(expected_goals,0)) %>%
  group_by(opponent) %>%
  summarise(xGA = sum(expected_goals)),by=c("team_name" = "opponent"))
head(xG_table)
```

Nice, so we have the xG of the teams. Note that you can also filter <code>shots_temp</code> to exclude penalties. I keep them in as I want to make a table with the complete xG and xPoints picture.

Now for the hard part, calculating the xPoints per match. To calculate it, we will build a function to simulate every shot in the match. We do that ten thousand times and count the times every team wins/draws/loses. To get some more info, read [the calculation in my old article about it.]("https://www.gettingbluefingers.com/posts/2021-03-03_expected-points/#the-calculation")

### CALCULATE XPOINTS

So first we make the function to simulate all the shots. It is an old function of mine that contains other functions as well. The easiest is to copy all the functions and just paste them in a new rscript.

<details>
<summary>the functions </summary>
```{r, eval=FALSE}
#| output: false

# main function
calculateChance<-function(team1,team2,p){

  home = 0
  away = 0
  draw = 0
  homeP = 0
  awayP = 0
  drawP = 0
  
  for(i in 1:p){
    matchWinner <- calculateWinner(team1,team2)
    
    if(matchWinner == "home"){
      home <- home+1
      homeP <- homeP+3
    }else if(matchWinner == "away"){
      
      away <- away+1
      awayP <- awayP+3
    }else{
      draw <- draw +1
      awayP <- awayP+1
      homeP <- homeP+1
    }
  }
  
  home = paste0(home/(p/100),"%")
  away = paste0(away/(p/100),"%")
  draw = paste0(draw/(p/100),"%")
  homeP = homeP/p
  awayP = awayP/p
  
  chances <- paste0("Home win: ",home,"% | Draw: ",draw,"% | Away win: ",away,"%")
  game <- data.frame(home,draw,away,homeP,awayP)
  return(game)
}

# function that returns if a shot becomes a goal and counts the goals
testShots<-function(XG){
  Goals = 0
  XG[is.na(XG)] <- 0
  for(i in 1:length(XG)){
    if(runif(1, 0.0, 1.0)<=XG[i]){
      
      Goals <- Goals + 1
    }else{
      
    }
  }
  
  return(Goals)
}  

# function that calculates the winner by comparing the number of goals of the two teams
calculateWinner <- function(home,away){
  HomeGoals = 0
  AwayGoals = 0
  
  HomeGoals <- testShots(home)
  AwayGoals <- testShots(away)
  
  #diffTemp <- (HomeGoals - AwayGoals)
  
  #diff <- append(diff,diffTemp)
  if(HomeGoals > AwayGoals){
    
    return("home")
  }else if(AwayGoals > HomeGoals){
    
    return("away")
  }else{
    
    return("draw")
  }
}
```
</details>

To use this function on the data frame of all the shots we are going to wrap it in a function so we can use it easier. The <code>10000</code> is the times we simulate every match. You can put it higher, but you'll have to wait longer for the results.

```{r, eval=FALSE}
plot_func <- function(df){
  calculateChance(pull(df %>% filter(team_id == home_team_id),expected_goals),
                                      pull(df %>% filter(team_id == away_team_id),expected_goals),
                                      10000)
}
```

And than just use it.

```{r, eval=FALSE}
df <- shots_temp %>%
  group_by(match_id) %>%
  nest() %>%
  mutate(result = map(data, plot_func)) %>%
  ungroup() %>%
  unnest(result)
head(df)
```

Let's join this with the data frame which contains the matches and teams

```{r, eval=FALSE}
total_df <- df %>%
  select(match_id,homeP,awayP) %>%
  left_join(match_details %>% 
              group_by(match_id,home_team,away_team) %>% 
              nest()) 
# if you unnested the match_details earlier, you can just join by 'match_id'

# and sum all the xPoints per team
xpoints <- total_df %>%
  group_by(home_team) %>%
  summarise(pointsH = sum(homeP)) %>%
  left_join(total_df %>%
              group_by(away_team) %>%
              summarise(pointsA = sum(awayP)),by =c("home_team"="away_team")) %>%
  mutate(xPoints = pointsH + pointsA)
head(xpoints)
```

### GET CURRENT LEAGUE TABLE

To make our own table complete, we need just one more data frame: the actual league table. I will show you the code of the function, but this one doesn't work for me. If you use this function, be aware the every column name has the prefix 'table_' and that those do not appear in my code!

<details>
<summary>worldfootballR FotMob function to get table</summary>
```{.r}
table <- fotmob_get_league_tables(
  country =     "ENG",
  league_name = "Championship"
)
```
</details>

I dove in the code to find the place where the table should be and found it, so you can copy the code beneath.

```{r, eval=FALSE}
safely_from_json <- purrr::safely(jsonlite::fromJSON, otherwise = NULL, quiet = TRUE)
jsonn <- safely_from_json("https://www.fotmob.com/api/leagues?id=48") 
table <- data.frame(jsonn$result$table$data$table$all)
```

Note the <code>id=48</code> part at the end of the url. Change that to the desired competition code that you can find in the csv mentioned earlier.

### JOIN TABLES

Now we "just" have to join these three data frames together. We select the id column as well, as it makes it easy to add the club logo.

```{r, eval=FALSE}
xptable <- table %>%
  left_join(xpoints, by=c("name" = "home_team")) %>%
  separate(scoresStr, c("GF", "GA"),"-") %>%
  mutate(GF = as.numeric(GF),
         GA = as.numeric(GA),
         GD = GF - GA) %>%
  
  select(idx,id, name, played, wins,draws,losses,GF,GA,GD,pts,xPoints) %>%
  arrange(-xPoints) %>%
  mutate(xRank = c(1:length(table$name))) %>%
  left_join(xG_table, by = c("name" = "team_name")) %>%
  mutate(xGD = xGF - xGA)
  
```
Let's arrange the table in the desired output.

```{r, eval=FALSE}
xptable <- xptable %>%
  select(idx,id,name,played,wins,draws,losses,GF,GA,GD,pts,xGF,xGA,xGD,xPoints,xRank) %>%
  `colnames<-`(c("RANK","id", "TEAM", "P","W","D","L","GF","GA","GD","PTS","xGF","xGA","xGD","xPTS","xRANK"))
```

The club logo's can be found at the following url: <code>https://images.fotmob.com/image_resources/logo/teamlogo/{id}.png</code>. So we can change the column that has the id's so that it will contain the url to the logo. This will make it super easy to add the logo to the table. 

```{r, eval=FALSE}
xptable <- xptable %>%
  mutate(id = glue::glue("https://images.fotmob.com/image_resources/logo/teamlogo/{id}.png"))
```

The best way about this is that now the whole code is fool proof for every competition thtat FotMob has xG data for. Just change the name and competition code in a few functions and you''ll get the table WITH the correct logo's.

### MAKING THE TABLE

I use <code>{reactable}</code> for the table on my site, as it is interactive. For this tutorial I'm using <code>{gt}</code> and <code>{gtExtras}</code> as those packages work great for static tables on websites. Just use the package you like the most. [Here you can find the documentation on <code>{gt}</code> and a lot of other packages to make tables.](https://gt.rstudio.com/) Just pick the one you like the most. <code>{gt}</code> let's you use HTML and [I copied some code from the creator.](https://themockup.blog/posts/2020-10-31-embedding-custom-features-in-gt-tables/#more-custom-html-work) 

```{r, eval=FALSE}
library(gt)

add_rank_color <- function(col1,col2){
  add_color <- if (col1 < col2) {
    "background:#61B861;"
  } else if (col1>col2) {
    "background:#FC785F;"
  } else if (col1 == col2) {
    "background:#FDD297;"
  }
  div_out <- htmltools::div(
    style = paste(
      "width: 20px;
  height: 20px;
  border: 1px solid rgba(0, 0, 0, 0.03);
  border-radius: 50%;
text-align: center;
  align-item: right;
   margin-left: 15px;
#  color: #000;
  font-size: 13px;
      font-weight:bold;",
      add_color
    ),col1
  )
  
  as.character(div_out) %>% 
    gt::html()
}
```

As I keep it simple/lazy, I just want to copy [my xRank table]("https://www.gettingbluefingers.com/rank") but with a <code>{gt}</code> instead of <code>{reactable}</code>. The code is a bit messy as I normally keep my <code>{gt}</code> tables simpler. 

So the above function colours the 'RANK' and 'xRANK' column according to which of the two is better/worse. This is so that I can use it in the code below that creates the table. The function has some css in there as well. 

```{r, eval=FALSE}
library(gtExtras)
xptable %>%
  mutate(
    RANK_temp = RANK,
    RANK = map2(RANK, xRANK, add_rank_color),
    xRANK = map2(xRANK, RANK_temp, add_rank_color)
  ) %>%
  select(-RANK_temp) %>%
  gt() %>%
  gt_img_rows(columns = id, img_source = "web", height = 17) %>%
  cols_label(
    id = " "
  ) %>%
  fmt_number(
    columns = c(xGF,xGA,xGD,xPTS),
    decimals = 1
  ) %>%
  cols_align(
    align = "center",
    columns = c(P:xRANK)
  ) %>%
  tab_style(
    style = list(
      
      cell_borders(
        sides = "left",
        color = "black",
        weight = px(3)
      )
      
    ),
    locations = list(
      cells_body(
        columns = c(P,xGF)
      )
    )
  ) %>%
  tab_spanner(
    label = "LEAGUE TABLE",
    columns = c(
      RANK:PTS
    )
  ) %>%
  tab_spanner(
    label = "EXPECTED TABLE",
    columns = c(
      xGF:xRANK
    )
  )  %>%
  cols_width(
    c(xGF:xPTS) ~ px(60),
    #c(RANK,xRANK) ~ px(30),
   TEAM ~ 150,
    everything() ~ px(50)
  ) %>% tab_style(
    locations = cells_column_labels(columns = everything()),
    style     = list(
      cell_borders(sides = "bottom", weight = px(3)),
      cell_text(weight = "bold")
    )
  ) %>% tab_style(
    locations = list(
      cells_body(
        columns = c(PTS,xPTS)
      )
    ),
    style = list(
      cell_text(weight = "bold")
    )
  ) %>%
  opt_table_font(font = "Roboto Mono") %>%
  tab_options(
    row.striping.background_color = "#F6F8FA",
    row.striping.include_table_body = TRUE,
    data_row.padding = px(2),
    table.border.top.style = "hidden",
    #table.border.bottom.style = "hidden",
    table.font.size = "12px"
  ) %>%
  tab_header(md("**LEAGUE TABLE BASED ON EXPECTED POINTS**")) %>%
   tab_source_note(
    source_note = "xPoints calculated by simulating every shot in a match"
  )%>%
   tab_source_note(
    source_note = "Data from Opta via FotMob"
  )

```

### SOME NOTES

As FotMob only has the minute for every shot, it is impossible to take rebounds into account. So if a team has two consecutive shots the xG is just summed up instead of first being factored with each other. This will skew some results, but I think it's a small error and every team will profit/be disadvantaged by it in the long run.

Another point is that gamestate will be a big factor in these calculations. If you're playing to just score and sit back, the opponent will gather more xG in most cases till they score the equalizer. After that it's probably fair game again, but the results are skewed a little. If the equalizer comes earlier, I think the current gamestate is just as fair but the xG and therefore xPoints are much lower.

