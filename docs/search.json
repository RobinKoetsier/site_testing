[
  {
    "objectID": "passes.html",
    "href": "passes.html",
    "title": "Passing",
    "section": "",
    "text": "Assists, xT and xA Eredivisie 2023/2024\nTable sorted on Assists and xA"
  },
  {
    "objectID": "rank.html",
    "href": "rank.html",
    "title": "xRank",
    "section": "",
    "text": "Expected Points Eredivisie 2023/2024\nLeague table sorted on xPoints\n\n\n\nBased on simulating every shot in every match\nLast update: \n2024-05-22\n\n\n\nDownload file"
  },
  {
    "objectID": "matches.html",
    "href": "matches.html",
    "title": "Matches",
    "section": "",
    "text": "Played Matches Eredivisie 2022/2023\nUnfold a match for more information"
  },
  {
    "objectID": "rank2.html",
    "href": "rank2.html",
    "title": "xRank2",
    "section": "",
    "text": "Find last season here"
  },
  {
    "objectID": "rank2.html#section",
    "href": "rank2.html#section",
    "title": "xRank2",
    "section": "",
    "text": "xRank\n\n\n\n\n\nExpected Points Eredivisie 2022/2023\nLeague table sorted on xPoints\n\n\n\nBased on simulating every shot in every match\n\n\n\n\n\n Download table as xlsx\n\n\n\n\n\n\nShots\n\n\n\n\n\n\n\n\n\n Download table as xlsx\n\n\n\n\n\nPasses\n\n\n\n\n\n\n\n\n\n Download table as xlsx\n\n\n\n\n\n\n\n\n\n\nInfo\n I decided to leave out the shotmaps for better loading and less bugs. You can still find them on Twitter. Every match played is there with the team names so it should be easy to find.\nIt is possible (and very likely) that the xG of players/teams isn’t exactly the sum of the plots on Twitter. The reason for this is that the data is collected a second time for this site and the shot data is changed/improved.\nIf you want to buy me a coffee/beer or help me maintaining the site, you can do so here."
  },
  {
    "objectID": "tutorials/RadarPizzaChart/index.html",
    "href": "tutorials/RadarPizzaChart/index.html",
    "title": "Percentile Radars/Pizza’s",
    "section": "",
    "text": "Intro\nDisclaimer: rotating the axis labels was never fully supported and is broken in newer versions of tidyvers/ggplot. Remove that line if you get an error.\nAs I really like the radars/pizza charts from football slices (RIP) and the mplsoccer package for Python, I was thinking about making them in R with the help of the worldfootballR package. When some people contacted me with the question if I knew how to do it, I decided to make a tutorial for it. If you don’t know what I’m talking about, this is the radar from mplsoccer.\n\n  \n\nThe Python package makes you enter te values yourself. For some leagues (Men’s Big 5 Leagues and European Competition, Major League Soccer, Women’s Super League) FBref has so called scouting reports with data from StatsBomb. These scouting reports do not only have the absolute numbers for several metrics, but also the percentiles. The worldfootballR package let’s you scrape them really easy. Let’s start by setting up our environment. If needed, install the packages first.\n\n\nGetting and preparing the data\nlibrary(worldfootballR)  #for scraping\nlibrary(tidyverse)       #for ggplot, dplyr and several other stuff\nlibrary(forcats)         #for sorting within ggplot\nlibrary(glue)            #easier than paste()\nI’m using the ‘Spartan’ font in all my plots, but you can use your own ofcourse. The extrafont package has a lot of nice fonts.\nNext we are going to pick a player in which we are interested, as long as it’s from the leagues mentioned earlier. I’m choosing Mateusz Klich, but you can pick someone else, I’m not judging you. As mentioned before, worldfootballR has a function to scrape the scouting report.\nNote: the function was updated to scrape the WHOLE scouting report. So selecting your rows need some more thought. Besides that, it also have a column called ‘StatsGroup’ so you can use this to colour your chart. Besides that, FBref switched to OPTA, so the names of the stats will be different!\ndf &lt;- fb_player_scouting_report(\"https://fbref.com/en/players/282679b4/Mateusz-Klich\")\nhead(df)\nFor some players you need to add\npos_versus = \"primary\"\ninside the function as the player played multiple positions, like this:\ndf &lt;- fb_player_scouting_report(\"https://fbref.com/en/players/282679b4/Mateusz-Klich\", pos_versus = \"primary\")\n\n\nUsing other data\n\nYou can use The full scouting report as well. You only have to make the data frame yourself. A short example how to do this:\ndf_selected&lt;- data.frame(player_name = \"Mateusz Klich\",\n                         Statistic = c(\"Pressures (Att 3rd)\", \n                                       \"% of dribblers tackled\",\n                                       \"Touches (Att 3rd)\",\n                                       \"Carries into Final Third\",\n                                       \"Progressive Passes Rec\",\n                                       \"Crosses\"),\n                         Per90 = c(4.63,\n                                    16,\n                                    26.11,\n                                    2.55,\n                                    7.22,\n                                    1.32),\n                         Percentile = c(92,\n                                        3,\n                                        94,\n                                        93,\n                                        98,\n                                        87),\n                         stat=c(\"Defending\",\n                                \"Defending\",\n                                \"Possession\",\n                                \"Possession\",\n                                \"Possession\",\n                                \"Attacking\"))\nYou can change the stat column to your liking, but you have to change the scale_fill_manuel() later on as well.\n\n\nNow we can use this column to color the chart. I’m not interested in every metric though. The ‘npxG+xA’ column for instance. I already have those metrics each in my chart. To pick the metrics you want/don’t want, print the Statistic column and choose.\n{::options parse_block_html=“true” /}\n\n\nSee all statistics\n\nprint(df$Statistic)\n    \n\n{::options parse_block_html=“false” /}\nIf you want to pick your metrics, use the statement below\ndf_selected &lt;- df[c(2,3,9,10,13,28,29,47,73,107,109,116,118,126,148),]\nTo colour them by type of the Statistic, we make a new column and fill it with “Attacking”, “Possession” or “Defending”. You can use the StatGroup column that is already provided as well, but this tutorial was made before you could scrape the whole scouting report. This is also the reason the Statistics look random. Just change it to match your data frame.\ndf_selected &lt;- df_selected %&gt;% \n      mutate(stat=case_when(Statistic == \"Non-Penalty Goals\"|\n                            Statistic == \"npxG\"|\n                            Statistic == \"Shots Total\"|\n                            Statistic == \"Assists\"|\n                            Statistic == \"xA\"|\n                            Statistic == \"npxG+xA\"|\n                            Statistic == \"Shot-Creating Actions\" ~ \"Attacking\",\n                            Statistic == \"Passes Attempted\"|\n                            Statistic == \"Pass Completion %\"|\n                            Statistic == \"Progressive Passes\"|\n                            Statistic == \"Progressive Carries\"|\n                            Statistic == \"Dribbles Completed\"|\n                            Statistic == \"Touches (Att Pen)\"|\n                            Statistic == \"Progressive Passes Rec\" ~ \"Possession\",\n                                 TRUE ~ \"Defending\"))\n\n\nMaking the chart\nTo make the pizza chart, we will use geom_bar() with coord_polar(). It’s a neat little trick as there isn’t a good package to do it otherwise.\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                       #select the columns to plot and sort it so the types of metric are grouped\n  geom_bar(aes(y=100,fill=stat),stat=\"identity\",width=1,colour=\"white\",                 #make the whole pizza first\n  alpha=0.5) +                                                                          #change alphe to make it more or less visible\n  geom_bar(stat=\"identity\",width=1,aes(fill=stat),colour=\"white\") +                     #insert the values \n  coord_polar() +                                                                       #make it round\n  geom_label(aes(label=Per90,fill=stat),size=2,color=\"white\",show.legend = FALSE)+     #add a label for the value. Change 'label=Per.90' to 'label=Percentile' to show the percentiles\n scale_fill_manual(values=c(\"Possession\" = \"#D70232\",                                   #choose colors to fill the pizza parts\n                             \"Attacking\" = \"#1A78CF\",\n                             \"Defending\" = \"#FF9300\")) +                                                              \n  scale_y_continuous(limits = c(-10,100))+                                              #create the white part in the middle.   \n  labs(fill=\"\",                                                                         #remove legend title\n       caption = \"Data from StatsBomb via FBref\",                                       #credit FBref/StatsBomb\n       title=df_selected$Player[1])+                                                    #let the title be te name of the player\n \n  theme_minimal() +                                                                     #from here it's only themeing. \n  theme(legend.position = \"top\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        text = element_text(family=\"Spartan-Light\"),                                    #I downloaded this font from Google Fonts. You can use your own font of course\n        plot.title = element_text(hjust=0.5),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank()) \n\n  \n\nDoesn’t look half bad, but the labels are horrible. Besides that we should add some extra information about the player. The labels need to be rotated so they look better. We can do this by hand, but if we change the number of metrics we’re using we need to do it all over again. So let’s just make a calculation that we can run everytime we make a new chart. I chose to display the ‘Per 90’ stats insteadd of the percentiles. You can change this in geom_label().\ntemp &lt;- (360/(nrow(df_selected))/2)                             #find the difference in angle between to labels and divide by two.\nmyAng &lt;- seq(-temp, -360+temp, length.out = nrow(df_selected))  #get the angle for every label\nang&lt;-ifelse(myAng &lt; -90, myAng+180, myAng)                                    #rotate label by 180 in some places for readability\nang&lt;-ifelse(ang &lt; -90, ang+180, ang)                                          #rotate some lables back for readability...\nBecause some labels are rather long (‘Progressive Passes Rec’ for instance) I decided to let every word start on a new line. I used gsub for that\ndf_selected$Statistic &lt;- gsub(\" \",\"\\n\",df_selected$Statistic)\nIf we plot again and add an extra line we will get a better plot.\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                       #select the columns to plot and sort it so the types of metric are grouped\n  geom_bar(aes(y=100,fill=stat),stat=\"identity\",width=1,colour=\"white\",                 #make the whole pizza first\n  alpha=0.5) +                                                                          #change alphe to make it more or less visible\n  geom_bar(stat=\"identity\",width=1,aes(fill=stat),colour=\"white\") +                     #insert the values \n  coord_polar() +                                                                       #make it round\n  geom_label(aes(label=Per90,fill=stat),size=2,color=\"white\",show.legend = FALSE)+     #add a label for the value. Change 'label=Per.90' to 'label=Percentile' to show the percentiles\n scale_fill_manual(values=c(\"Possession\" = \"#D70232\",                                   #choose colors to fill the pizza parts\n                             \"Attacking\" = \"#1A78CF\",\n                             \"Defending\" = \"#FF9300\")) +                                                              \n  scale_y_continuous(limits = c(-10,100))+                                              #create the white part in the middle.   \n  labs(fill=\"\",                                                                         #remove legend title\n       caption = \"Data from StatsBomb via FBref\",                                       #credit FBref/StatsBomb\n       title=df_selected$Player[1])+                                                    #let the title be te name of the player\n \n  theme_minimal() +                                                                     #from here it's only themeing. \n  theme(legend.position = \"top\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 6, angle = ang),\n        text = element_text(family=\"Spartan-Light\"),                                    #I downloaded this font from Google Fonts. You can use your own font of course\n        plot.title = element_text(hjust=0.5),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank()) \n\n  \n\nThat looks much better! From here you can change everything you want. I’m going to add a subtitle, and make some theme adjustments. Adding a picture is something I will add to this tutorial in the future.\n\n  \n\n{::options parse_block_html=“true” /}\n\n\nLet’s see de final code!\n\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                       #select the columns to plot and sort it so the types of metric are grouped\n  geom_bar(aes(y=100,fill=stat),stat=\"identity\",width=1,colour=\"white\",                 #make the whole pizza first\n  alpha=0.5) +                                                                          #change alphe to make it more or less visible\n  geom_bar(stat=\"identity\",width=1,aes(fill=stat),colour=\"white\") +                     #insert the values \n  coord_polar() +                                                                       #make it round\n  geom_label(aes(label=Per90,fill=stat),size=2,color=\"white\",show.legend = FALSE)+      #add a label for the value. Change 'label=Per.90' to 'label=Percentile' to show the percentiles\n scale_fill_manual(values=c(\"Possession\" = \"#D70232\",                                   #choose colors to fill the pizza parts\n                             \"Attacking\" = \"#1A78CF\",\n                             \"Defending\" = \"#FF9300\")) +                                                              \n  scale_y_continuous(limits = c(-10,100))+                                              #create the white part in the middle.   \n  labs(fill=\"\",   \n       caption = \"Data from StatsBomb via FBref\",     \n       #remove legend title\n       title=glue(\"{df_selected$Player[1]} | Leeds United\"),\n        subtitle = glue::glue(\"{df_selected$season} | Compared to midfielders Top 5 competitions | stats per 90\"))+ #let the title be te name of the player                                                \n \n  theme_minimal() +                                                                     #from here it's only themeing. \n  theme(plot.background = element_rect(fill = \"#F2F4F5\",color = \"#F2F4F5\"),\n        panel.background = element_rect(fill = \"#F2F4F5\",color = \"#F2F4F5\"),\n        legend.position = \"top\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n         axis.text.x = element_text(size = 6, angle = ang),\n        text = element_text(family=\"Spartan-Light\"),                                    #I downloaded this font from Google Fonts. You can use your own font of course\n        plot.title = element_markdown(hjust=0.5,family=\"Spartan-Medium\"),\n        plot.subtitle = element_text(hjust=0.5,size=8),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        plot.margin = margin(5,2,2,2)) \nNot too hard to do, right?\n\n\n{::options parse_block_html=“false” /}\nNote: with coord_polar() in combination with a background colour, I need to trim the image afterwards. I do this with a commandline (on mac OSX) statement in my R session:\nsystem(\"convert -trim image.png new_image.png\")\nWhere image.png is my just saved image and new_image.png will be the trimmed one. There is also an option to add the color to ggsave:\nggsave(\"image.png\",bg=\"#F2F4F5\")\nYou can add the resolution to ggsave() if the quality is poor.\nI prefer to trim it, as it removes unnecessary parts from the plot.\n\n\nSome other (well known) styles\nSome examples, with some well known styles included. Just a head start to create your own style and learn about how the different elements of ggplot work. Play around with colours/fonts/grid lines etc. to create something unique!\n\nThe Athletic/ Tom Worville\n\n  \n\n\n\nThe code\n\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                       \n  geom_bar(aes(y=100),fill=\"#131313\",stat=\"identity\",width=1,colour=\"#797979\",                 \n  alpha=0.5,show.legend = FALSE) +      \n  \n  \n  geom_bar(stat=\"identity\",width=1,aes(fill=stat),colour=\"#F3FEFC\",alpha=1) +                     \n  coord_polar(clip = \"off\") +                                                                      \n     geom_hline(yintercept=25, colour=\"#565656\",linetype=\"longdash\",alpha=0.5)+\n  geom_hline(yintercept=50, colour=\"#565656\",linetype=\"longdash\",alpha=0.5)+\n  geom_hline(yintercept=75, colour=\"#565656\",linetype=\"longdash\",alpha=0.5)+ \n scale_fill_manual(values=c(\"Possession\" = \"#1ADA89\",                                   \n                             \"Attacking\" = \"#0F70BF\",\n                             \"Defending\" = \"#EC313A\")) +                                                        \n   geom_label(aes(label=Percentile,fill=stat),size=2,color=\"white\",show.legend = FALSE)+ \n  scale_y_continuous(limits = c(-20,100))+                                              \n  labs(fill=\"\",   \n       caption = \"Data from StatsBomb via FBref\\nStyle copied from The Athletic/@worville\",     \n       #remove legend title\n       title=glue(\"{df_selected$Player[1]} | Leeds United\"),\n        subtitle = glue::glue(\"{df_selected$season} | Compared to midfielders Top 5 competitions | stats per 90\"))+                                                \n  theme_minimal() +                                                                     \n  theme(plot.background = element_rect(fill = \"#131313\",color = \"#131313\"),\n        panel.background = element_rect(fill = \"#131313\",color = \"#131313\"),\n        legend.position = \"bottom\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 6,colour = \"#FFFFFF\"),\n        text = element_text(family=\"Spartan-Light\",colour= \"#FEFEFE\"),                                   \n        plot.title = element_markdown(hjust=0.5,family=\"Spartan-Medium\"),\n        plot.subtitle = element_text(hjust=0.5,size=8),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        plot.margin = margin(5,4,2,4)) \n\n\n\n\nFootball Slices\n\n  \n\n{::options parse_block_html=“true” /}\n\n\nThe code\n\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                      \n  geom_bar(aes(y=100),fill=\"#FAFBFD\",stat=\"identity\",width=1,colour=\"black\",                 \n  alpha=0.5) +                                                                          \n  geom_bar(stat=\"identity\",width=0.95,aes(fill=stat),colour=NA) +                    \n  coord_polar(clip = \"off\") +                                                                       \n \n   geom_hline(yintercept=25, colour=\"#CFD0D2\",alpha=1,size=0.1)+\n  geom_hline(yintercept=50, colour=\"#CFD0D2\",alpha=1,size=0.1)+\n  geom_hline(yintercept=75, colour=\"#CFD0D2\",alpha=1,size=0.1)+ \n   geom_text(aes(label=Per90,fill=stat),size=2,color=\"black\",show.legend = FALSE)+  \n scale_fill_manual(values=c(\"Possession\" = \"#F47294\",                                   \n                             \"Attacking\" = \"#E7D96E\",\n                             \"Defending\" = \"#8FBFEF\")) +                                                              \n  scale_y_continuous(limits = c(-10,110))+                                             \n  labs(fill=\"\",   \n       caption = \"Data from StatsBomb via FBref\\nStyle copied from @FootballSlices\",     \n       #remove legend title\n       title=glue(\"{df_selected$Player[1]} | Leeds United\"),\n        subtitle = glue::glue(\"{df_selected$season} | Compared to midfielders Top 5 competitions | stats per 90\"))+                                               \n  theme_minimal() +                                                                  \n  theme(plot.background = element_rect(fill = \"#FAFBFD\",color = \"#FAFBFD\"),\n        panel.background = element_rect(fill = \"#FAFBFD\",color = \"#FAFBFD\"),\n        legend.position = \"top\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n         axis.text.x = element_text(size = 6),\n        text = element_text(family=\"Spartan-Light\"),                                    \n        plot.title = element_markdown(hjust=0.5,family=\"Spartan-Medium\"),\n        plot.subtitle = element_text(hjust=0.5,size=8),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        plot.margin = margin(5,2,2,2)) \n\n\n{::options parse_block_html=“false” /}\n\n\nOne with no background\n\n  \n\n{::options parse_block_html=“true” /}\n\n\nThe code\n\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                      \n  geom_bar(aes(y=100),fill=\"#F2F4F5\",stat=\"identity\",width=1,colour=\"white\",                \n           alpha=1,linetype=\"dashed\") +                                                                          \n  geom_bar(stat=\"identity\",width=1,fill=\"#D20222\",colour=\"white\") +   \n  geom_hline(yintercept=25, colour=\"white\",linetype=\"longdash\",alpha=0.5)+\n  geom_hline(yintercept=50, colour=\"white\",linetype=\"longdash\",alpha=0.5)+\n  geom_hline(yintercept=75, colour=\"white\",linetype=\"longdash\",alpha=0.5)+ \n  geom_hline(yintercept=100, colour=\"white\",alpha=0.5)+ \n  coord_polar() +                                                                     \n  geom_label(aes(label=Per90),fill=\"#D20222\",size=2,color=\"white\",show.legend = FALSE)+     \n  scale_fill_manual(values=c(\"Possession\" = \"#D70232\",                                  \n                             \"Attacking\" = \"#1A78CF\",\n                             \"Defending\" = \"#FF9300\")) +                                                              \n  scale_y_continuous(limits = c(-10,100))+                                              \n  labs(fill=\"\",   \n       caption = \"Data from StatsBomb via FBref\",     \n       #remove legend title\n       title=glue(\"{df_selected$Player[1]} | Manchester United\"),\n       subtitle = glue::glue(\"{df_selected$season} | Compared to midfielders Top 5 competitions | stats per 90\"))+                                               \n  \n  theme_minimal() +                                                                     \n  theme(plot.background = element_rect(fill = \"#F2F4F5\",color = \"#F2F4F5\"),\n        panel.background = element_rect(fill = \"#F2F4F5\",color = \"#F2F4F5\"),\n        legend.position = \"top\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 6, angle = ang),\n        text = element_text(family=\"Spartan-Light\"),                                    \n        plot.title = element_markdown(hjust=0.5,family=\"Spartan-Medium\"),\n        plot.subtitle = element_text(hjust=0.5,size=8),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        plot.margin = margin(5,2,2,2)) \n\n\n{::options parse_block_html=“false” /}\n\n\nOne with other labels and background colour\n\n  \n\n{::options parse_block_html=“true” /}\n\n\nThe code\n\nlabel_data &lt;- df_selected\n\n# calculate the ANGLE of the labels\nnumber_of_bar &lt;- nrow(label_data)\nlabel_data$id &lt;- seq(1,length(label_data$player_name))\nangle &lt;-  90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)\n\n# calculate the alignment of labels: right or left\n# If I am on the left part of the plot, my labels have currently an angle &lt; -90\nlabel_data$hjust&lt;-ifelse( angle &lt; -90, 1, 0)\n\n# flip angle BY to make them readable\nlabel_data$angle&lt;-ifelse(angle &lt; -90, angle+180, angle)\n\n\n\nggplot(df_selected,aes(fct_reorder(Statistic,stat),Percentile)) +                      \n  geom_bar(aes(y=100),fill=\"#0066B2\",stat=\"identity\",width=1,colour=\"#0066B2\",                \n           alpha=0.4,linetype=\"dashed\") +                                                                          \n  geom_bar(stat=\"identity\",width=1,fill=\"#CC0033\",colour=\"white\") +   \n  geom_hline(yintercept=25, colour=\"white\",linetype=\"longdash\",alpha=0.5)+\n  geom_hline(yintercept=50, colour=\"white\",linetype=\"longdash\",alpha=0.5)+\n  geom_hline(yintercept=75, colour=\"white\",linetype=\"longdash\",alpha=0.5)+ \n  geom_hline(yintercept=100, colour=\"white\",alpha=0.5)+ \n  coord_polar() +                                                                     \n  geom_label(aes(label=Per90),fill=\"#CC0033\",size=2,color=\"white\",show.legend = FALSE,family=\"Spartan-Bold\")+     \n  scale_fill_manual(values=c(\"Possession\" = \"#D70232\",                                  \n                             \"Attacking\" = \"#1A78CF\",\n                             \"Defending\" = \"#FF9300\")) +                                                              \n  scale_y_continuous(limits = c(-10,110))+                                              \n  labs(fill=\"\",   \n       caption = \"Data from StatsBomb via FBref\",     \n       #remove legend title\n       title=glue(\"{df_selected$Player[1]} | Bayern Munich\"),\n       subtitle = glue::glue(\"{df_selected$season} | Compared to attackers Top 5 competitions | stats per 90\"))+                                               \n  geom_text(data=label_data, aes(x=id, y=100+10, label=Statistic, hjust=hjust), \n      color=\"#0066B2\", fontface=\"bold\",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE )  +\n  theme_minimal() +                                                                     \n  theme(plot.background = element_rect(fill = \"#F2F4F5\",color = \"#F2F4F5\"),\n        panel.background = element_rect(fill = \"#F2F4F5\",color = \"#F2F4F5\"),\n        legend.position = \"top\",\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n       # axis.text.x = element_text(size = 6, angle = ang),\n        axis.text.x = element_blank(),\n        text = element_text(family=\"Spartan-Light\"),                                    \n        plot.title = element_markdown(hjust=0.5,family=\"Spartan-Medium\"),\n        plot.subtitle = element_text(hjust=0.5,size=8),\n        plot.caption = element_text(hjust=0.5,size=6),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        plot.margin = margin(5,2,2,2)) \n\n\n{::options parse_block_html=“false” /}\nIf you have any questions, contact me on Twitter. and please tag me if you make a chart yourself! Love to see what people make of it."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nHow insane is PSV?\n\n\nA look at PSV’s Eredivisie data\n\n\n\nDec 23, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nExpected Points\n\n\nHow do we calculate xPoints?\n\n\n\nMar 3, 2021\n\n\n\n\n\n\n\n\n\n\n\n\nExtraordinary Giakoumakis\n\n\nHow good is Giakoumakis really?\n\n\n\nFeb 4, 2021\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Opponent.html",
    "href": "Opponent.html",
    "title": "Roda’s opponent next game",
    "section": "",
    "text": "[1] \"2023-11-25\"\n\n\n\nShots\n\n\n\n\n\n\n\nShots conceded\n\n\n\n\n\n\n\n\n\nxG for and against, the numbers\n\n\n\n\n\n\n\n\n\nPlot with xG\n\n\n\n\n\n\n\n\n\n\n\n\nTake Ons/Dribbles\nA take on is an attempted dribble past an opponent. You can click on the column names to sort them.\n\n\n\n\n\n\n\n\n\nTop 5 attempted\n\n\n\n\n\n\n\nTop 5 successful\n\n\n\n\n\n\n\nBall Loss\n\n\nUnsuccessful passes in own half\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOther ball loss own half\n(Dispossessed, bad touch, failed dribble/take on)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCrosses\nTotally different from the data you sent me, but maybe useful?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBal recoveries opponents half\n“Team wins the possession of the ball and successfully keeps possession for at least two passes or an attacking play”"
  },
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nxPoints\n\n\nCalculate the expected points yourself with the worldfootballR package\n\n\n\nOct 18, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShots on target\n\n\nVisualize where teams shoot on goal!\n\n\n\nOct 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPercentile Radars/Pizza’s\n\n\nMake Percentile Pizza charts like The Atletic, mplsoccer or Football Slices!\n\n\n\nApr 27, 2021\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2021-12-23_PSV/index.html",
    "href": "2021-12-23_PSV/index.html",
    "title": "How insane is PSV?",
    "section": "",
    "text": "PSV has won its first 16 games of the season, and not at all undeserved. How special is this achievement? And who stands out in this team? In this post I’m going to look at the underlying numbers of their so far perfect season and compare some stuff to previous seasons and Eredivisie records."
  },
  {
    "objectID": "2021-12-23_PSV/index.html#intro",
    "href": "2021-12-23_PSV/index.html#intro",
    "title": "How insane is PSV?",
    "section": "",
    "text": "PSV has won its first 16 games of the season, and not at all undeserved. How special is this achievement? And who stands out in this team? In this post I’m going to look at the underlying numbers of their so far perfect season and compare some stuff to previous seasons and Eredivisie records."
  },
  {
    "objectID": "2021-12-23_PSV/index.html#previous-seasons",
    "href": "2021-12-23_PSV/index.html#previous-seasons",
    "title": "How insane is PSV?",
    "section": "Previous seasons",
    "text": "Previous seasons\n\nPoints\nSince the Eredivisie gives you three points for a win, the best team after 16 games was PSV 18/19. They only lost to Feyenoord in their first 16 games, giving them 45 points at this stage in the season. Suprisingly enough, this wasn’t enough for the title, as they finished 2nd, three points behind Ajax after losing their spot at the top of the table after matchday 28. PSV Finished that season with 83 points.\nIf we recalculate older seasons to the three points per win rule, Ajax 69/70 also got 45 points and they only lost to Feyenoord as well.\n\nTeams with the most points in one season\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNr.\nClub\nSeason\nPos\nW\nD\nL\nPts\nGf\nGa\nGd\n\n\n\n\n1.\nAjax\n1971/72\n1\n30\n3\n1\n93\n104\n20\n+84\n\n\n2.\nAjax\n1972/73\n1\n30\n0\n4\n90\n102\n18\n+84\n\n\n3.\nAjax\n1997/98\n1\n29\n2\n3\n89\n112\n22\n+90\n\n\n4.\nAjax\n1994/95\n1\n27\n7\n0\n88\n101\n30\n+71\n\n\n4.\nPSV\n2014/15\n1\n29\n1\n4\n88\n92\n31\n+61\n\n\n4.\nAjax\n2020/21\n1\n28\n4\n2\n88\n102\n23\n+79\n\n\n\nAs you can see in the above table, only Ajax 97/98, PSV 14/15 and Ajax 20/21 finished with more than 87 points since the rule chance. Personally I’m not a fan of recalculating point totals with the new rule (as you maybe already guessed), but included them in the table to be complete. Ajax 71/72 was insane on many levels and Ajax 94/95 finished the season without losing a game, which is still unmatched. PSV 14/15 won the league with 17 points more than number 2 Ajax.\nPSV is on track to get 102 points, which would of cource be a new record. The chance that this will happen is small, but a new record should be possible.\n\n\nGoals\nNot only in points, but also in goals is PSV unstoppable. They scored 56 goals already. The three most scoring teams after 16 matches (again, since 95/96) are PSV and Ajax in 18/19 and Ajax in 20/21, all three with 57 goals. The 18/19 season was something else for those two teams, as you can see.\nIf we look at all Eredivisie seasons we can also include Feyenoord 60/61 (62 goals), PSV 87/88 (60), Ajax 66/67 (58) and Feyenoord 74/75 (58).\n\nTeams with the most goal in one season\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNr.\nClub\nSeason\nPos\nW\nD\nL\nPts\nGf\nGa\nGd\n\n\n\n\n1.\nAjax\n1966/67\n1\n26\n4\n4\n82\n122\n34\n+88\n\n\n2.\nAjax\n1985/86\n2\n25\n2\n7\n77\n120\n35\n+85\n\n\n3.\nAjax\n2018/19\n1\n28\n2\n4\n86\n119\n32\n+87\n\n\n4.\nAjax\n1981/82\n1\n26\n4\n4\n82\n117\n42\n+75\n\n\n4.\nPSV\n1987/88\n1\n27\n5\n2\n86\n117\n28\n+89\n\n\n\nPSV is on track to score 119 goals, which would make them on par with Ajax 18/19 in 3rd spot.\nNone of the teams with the most points are the teams with the most goals scored in one season. Will PSV get in both rankings at the end of the season?\n\n\nxG Timeline\n\n\n\n\n\nAs you can see, PSV mainly improved their attacking output which results in an NPxG difference of 2.29 per game. This is (of course) the best xG difference of the league.\nPSV 22/23 came also close to this at the start of their season, but they played Volendam, Go Ahead Eagles, Emmen and Excelsior as their first four games teams() they absolutely crushed, by the way). This season they played every team except Excelsior."
  },
  {
    "objectID": "2021-12-23_PSV/index.html#this-season",
    "href": "2021-12-23_PSV/index.html#this-season",
    "title": "How insane is PSV?",
    "section": "This season",
    "text": "This season\n\nTeam data\nWinning all your games is difficult, especially when there normally is a game where you produce a lot of xG without scoring (more than your opponent). Willem II against PSV 21/22 comes to mind… And even this season, the game against Vitesse could easily been different than a win.\n\nTotal xG\n\n\n\n\n\nIf we look at their NPxG, we see that they score close to expectations. So they are just that good in attack. They are not lucky with finishing their chances over the long run.\n\n\n\n\n\n\n\nxG Difference\nPSV xG difference is (as I mentioned before) the best of the league. Only Feyenoord comes a little close, but PSV’s attacking numbers are in a world of their own.\n\n\n\n\n\n\n\nScoring goals\n\n\n\n\n\nThe chance at scoring 56 goals from their xG is around 5%. That’s a small number but we should look at the bigger picture. Scoring 56 goals or more has a chance of around 23%. Scoring between 50 and 60 goals: 55%\n\n\nConceding goals\nAccording to their xG against they should have conceded more goals than the 6 they did. As you can see, six goals is very unlikely. Even conceding less than 10 goals only has a chance of less than 5%. They should have conceded somewhere around 14 or 15 goals. Are they lucky in that regard, or is there something else?\n\n\n\n\n\nWe will take a look at this later when we investigate some Benitez data.\n\n\nxG Per game\n\n\n\n\n\nAbove you can see the xG PSV created (top row) and conceded (bottom) for every match this season. The games where they conceded the most xG were the games against the two teams that were in a crisis (Ajax) or would soon be (Vitesse). In the game versus Vitesse they had a penalty which means their NPxG was lower than Vitesse’s. The other games they won with more NPxG than their opponent. So like I said early, they deserve the spot in the table without a doubt.\n\n\n\nThe Players\nHonestly, I could dive into the data for so many players of this team. To avoiud the risk of overkill, I only chose a few to review. If you want to see some data from other players, feel free to contact me on Twitter.\n\nBenitez\nLet’s begin in the back: Benitez. He only conceded 6 goals from 14.74 xG. Most of you know, that this stat doesn’t say much about Benitez’ qualities. If the opposite players shot all their chances out of the stadium, the xG would still be the same. Lukily we have PsxG/xGOT to qualify the shots instead of the chances.\n\n\n\n\n\nOpta gives PSV’s opposition a PSxG of 9.6. So yeah, they do finish their chances sub par. But even then, Benitez is preventing 3.6 goals. That’s a lot from 9.6 PSxG. In other words: he’s preventing 37.5% of PSV’s goals against. In absolute numbers, only Barkas and Olij match him with 3.6 and 3.5 goals prevented, but that’s from 26.6 and 25.5 PSxG. So yeah, PSV is maybe lucky with the finishing abilities of the teams they faced, but on top of that Benitez is having a great season.\n\n\nLuuk de Jong\n\n\n\n\n\nPSV is finishing their 51.14 xG with 46.6 PSxG, so not that deadly. Their top goalscorer is Luuk de Jong with “only” eleven goals of which four were penalties. Those are not the numbers you would expect from the striker of a team that scored x goals already. Pavlidis and Gimenez are on 18 already and their teams only scored 35 en 48 goals. But that’s probably the strength of this PSV, a lot of players know how to score a goal. And of course, De Jong brings more than just goals to this team (he has 7 assists), but his lack of goals is something that stands out for me.\n\n\nJoey Veerman\nBy far their most dangerous passer is Veerman. With his open play passes he created an xThreat of 3.64. Only Sugaware does this better with 4.38 in about the same minutes.\n\n\n\n\n\nBesides that he assisted 72 shots, by far the most of the whole league.\n\n\n\n\n\nJust to show that those passes were not only to a player that loves to shoot from far, here is the top 10 xA and their assists this season.\n\n\n\n\n\nAs you can see, he creates a lot. You can also see another PSV player: Bakayoko. A player a lot of people were happy to let him go to PSG for peanuts, but he proves them wrong with a great season."
  },
  {
    "objectID": "Roda.html",
    "href": "Roda.html",
    "title": "Roda",
    "section": "",
    "text": "[1] \"2023-11-27\"\n\n\n\nShots\n\n\n\n\n\n\n\nShots conceded\n\n\n\n\n\n\n\n\n\nxG for and against, the numbers\n\n\n\n\n\n\n\n\n\nPlot with xG\n\n\n\n\n\n\n\n\n\n\n\n\nTake Ons/Dribbles\nA take on is an attempted dribble past an opponent. You can click on the column names to sort them.\n\n\n\n\n\n\n\n\n\nTop 5 attempted\n\n\n\n\n\n\n\nTop 5 successful\n\n\n\n\n\n\n\nBall Loss\n\n\nUnsuccessful passes in own half\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOther ball loss own half\n(Dispossessed, bad touch, failed dribble/take on)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCrosses\nTotally different from the data you sent me, but maybe useful?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBal recoveries opponents half\n“Team wins the possession of the ball and successfully keeps possession for at least two passes or an attacking play”"
  },
  {
    "objectID": "stuff/podcasts/index.html",
    "href": "stuff/podcasts/index.html",
    "title": "Podcasts",
    "section": "",
    "text": "I’m in the monthly Dutch football podcast from ‘Tussen de linies’. You can check the latest episode here:\n\n\nAll episodes:\n Spotify\n Apple Music\nBesides that, I was also in one episode of the ‘Showkeepers Podcast’ (also in Dutch)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Welcome!!\nMy name is Robin Koetsier. This site serves as a personal site for my data and blog posts.\nI mostly write/visualize stuff about Dutch football. On my Twitter profile you can follow me for visualizations of Eredivisie matches and other stuff. I will update the Eredivisie stats after every matchday. Below you can check all my posts combined. In the menu they are divided by what kind of post it is.\n  \n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nHow insane is PSV?\n\n\n\n\n\nA look at PSV’s Eredivisie data\n\n\n\n\n\n\nDec 23, 2023\n\n\nRobin Koetsier\n\n\n\n\n\n\n  \n\n\n\n\nxPoints\n\n\n\n\n\nCalculate the expected points yourself with the worldfootballR package\n\n\n\n\n\n\nOct 18, 2022\n\n\n\n\n\n\n  \n\n\n\n\nShots on target\n\n\n\n\n\nVisualize where teams shoot on goal!\n\n\n\n\n\n\nOct 10, 2022\n\n\n\n\n\n\n  \n\n\n\n\nPercentile Radars/Pizza’s\n\n\n\n\n\nMake Percentile Pizza charts like The Atletic, mplsoccer or Football Slices!\n\n\n\n\n\n\nApr 27, 2021\n\n\n\n\n\n\n  \n\n\n\n\nExpected Points\n\n\n\n\n\nHow do we calculate xPoints?\n\n\n\n\n\n\nMar 3, 2021\n\n\n\n\n\n\n  \n\n\n\n\nExtraordinary Giakoumakis\n\n\n\n\n\nHow good is Giakoumakis really?\n\n\n\n\n\n\nFeb 4, 2021\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Shots.html",
    "href": "Shots.html",
    "title": "Shooting",
    "section": "",
    "text": "Shots and xG Eredivisie 2023/2024\nTable sorted on NP-Goals and NPxG"
  },
  {
    "objectID": "passesKKD.html",
    "href": "passesKKD.html",
    "title": "Passing",
    "section": "",
    "text": "Assists, xT and xA Eerste Divisie 2023/2024\nTable sorted on Assists and xA"
  },
  {
    "objectID": "dia.html#getting-up",
    "href": "dia.html#getting-up",
    "title": "Test",
    "section": "Getting up",
    "text": "Getting up\n\nTurn off alarm\nGet out of bed"
  },
  {
    "objectID": "dia.html#breakfast",
    "href": "dia.html#breakfast",
    "title": "Test",
    "section": "Breakfast",
    "text": "Breakfast\n\nEat eggs\nDrink coffee"
  },
  {
    "objectID": "dia.html#dinner",
    "href": "dia.html#dinner",
    "title": "Test",
    "section": "Dinner",
    "text": "Dinner\n\nEat spaghetti\nDrink wine"
  },
  {
    "objectID": "dia.html#going-to-sleep",
    "href": "dia.html#going-to-sleep",
    "title": "Test",
    "section": "Going to sleep",
    "text": "Going to sleep\n\nGet in bed\nCount sheep"
  },
  {
    "objectID": "posts/2023-23-12_PSV/index.html",
    "href": "posts/2023-23-12_PSV/index.html",
    "title": "How insane is PSV?",
    "section": "",
    "text": "PSV has won its first 16 games of the season, and not at all undeserved. How special is this achievement? And who stands out in this team? In this post I’m going to look at the underlying numbers of their so far perfect season and compare some stuff to previous seasons and Eredivisie records. It’s a lot of vizualizations I found interesting"
  },
  {
    "objectID": "posts/2023-23-12_PSV/index.html#intro",
    "href": "posts/2023-23-12_PSV/index.html#intro",
    "title": "How insane is PSV?",
    "section": "",
    "text": "PSV has won its first 16 games of the season, and not at all undeserved. How special is this achievement? And who stands out in this team? In this post I’m going to look at the underlying numbers of their so far perfect season and compare some stuff to previous seasons and Eredivisie records. It’s a lot of vizualizations I found interesting"
  },
  {
    "objectID": "posts/2023-23-12_PSV/index.html#previous-seasons",
    "href": "posts/2023-23-12_PSV/index.html#previous-seasons",
    "title": "How insane is PSV?",
    "section": "Previous seasons",
    "text": "Previous seasons\n\nPoints\nSince the Eredivisie gives you three points for a win, the best team after 16 games was PSV 18/19. They only lost to Feyenoord in their first 16 games, giving them 45 points at this stage in the season. Suprisingly enough, they didn’t win the title, as they finished 2nd, three points behind Ajax after losing their spot at the top of the table after match day 29. PSV Finished that season with 83 points.\nIf we recalculate older seasons to the three points per win rule, Ajax 69/70 also got 45 points and they only lost to Feyenoord as well.\n\nTeams with the most points in one season\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNr.\nClub\nSeason\nPos\nW\nD\nL\nPts\nGf\nGa\nGd\n\n\n\n\n1.\nAjax\n1971/72\n1\n30\n3\n1\n93\n104\n20\n+84\n\n\n2.\nAjax\n1972/73\n1\n30\n0\n4\n90\n102\n18\n+84\n\n\n3.\nAjax\n1997/98\n1\n29\n2\n3\n89\n112\n22\n+90\n\n\n4.\nAjax\n1994/95\n1\n27\n7\n0\n88\n101\n30\n+71\n\n\n4.\nPSV\n2014/15\n1\n29\n1\n4\n88\n92\n31\n+61\n\n\n4.\nAjax\n2020/21\n1\n28\n4\n2\n88\n102\n23\n+79\n\n\n\nAs you can see in the above table, only Ajax 97/98, PSV 14/15 and Ajax 20/21 finished with more than 87 points since the rule chance. Personally I’m not a fan of recalculating point totals with the new rule, but included them in the table to be complete. Ajax 71/71 was insane on many levels and Ajax 94/95 finished the season without losing a game, which is still unmatched. PSV 14/15 won the league with 17 points more than number 2 Ajax.\nPSV is on track to get 102 points, which would of course be a new record. The chance that this will happen is small, but a new record should be possible.\n\n\nGoals\nNot only in points, but also in goals they are unstoppable. They scored 56 goals already. The three most scoring teams after 16 matches (again, since 95/96) are PSV and Ajax in 18/19 and Ajax in 20/21, all three with 57 goals. The 18/19 season was something else for those two teams, as you can see.\nIf we look at all Eredivisie seasons we can also include Feyenoord 60/61 (62 goals), PSV 87/88 (60), Ajax 66/67 (58) and Feyenoord 74/75 (58).\n\nTeams with the most goal in one season\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNr.\nClub\nSeason\nPos\nW\nD\nL\nPts\nGf\nGa\nGd\n\n\n\n\n1.\nAjax\n1966/67\n1\n26\n4\n4\n82\n122\n34\n+88\n\n\n2.\nAjax\n1985/86\n2\n25\n2\n7\n77\n120\n35\n+85\n\n\n3.\nAjax\n2018/19\n1\n28\n2\n4\n86\n119\n32\n+87\n\n\n4.\nAjax\n1981/82\n1\n26\n4\n4\n82\n117\n42\n+75\n\n\n4.\nPSV\n1987/88\n1\n27\n5\n2\n86\n117\n28\n+89\n\n\n\nPSV is on track to score 119 goals, which would make them on par with Ajax 18/19 in 3rd spot.\nNone of the teams with the most points are the teams with the most goals scored in one season. Will PSV get in both rankings at the end of the season?\n\n\nxG Timeline\n\n\n\n\n\nAs you can see, PSV mainly improved their attacking output which results in an NPxG difference of 2.29 per game. This is (of course) the best xG difference of the league. We will look at the other teams later.\nPSV 22/23 came also close to this at the start of their season, but they played FC Volendam, Go Ahead Eagles, FC Emmen and Excelsior as their first four games (teams they absolutely crushed, by the way). This season they played every team except Excelsior."
  },
  {
    "objectID": "posts/2023-23-12_PSV/index.html#this-season",
    "href": "posts/2023-23-12_PSV/index.html#this-season",
    "title": "How insane is PSV?",
    "section": "This season",
    "text": "This season\n\nTeam data\nWinning all your games is difficult, especially when there normally is a game where you produce a lot of xG without scoring (more than your opponent). Willem II against PSV 21/22 comes to mind… And even this season, the game against Vitesse could easily been different than a win.\n\nTotal xG\n\n\n\n\n\nIf we look at their NPxG, we see that they score close to expectations. So they are just that good in attack. They are not lucky with finishing their chances over the long run.\n\n\n\n\n\n\n\nxG Difference\nPSV xG difference is (as I mentioned before) the best of the league. Only Feyenoord comes a little close, but PSV’s attacking numbers are in a world of their own.\n\n\n\n\n\n\n\nScoring goals\n\n\n\n\n\nThe chance at scoring 56 goals from their xG is around 5%. That’s a small number but we should look at the bigger picture. Scoring 56 goals or more has a chance of around 23%. Scoring between 50 and 60 goals: 55%\n\n\nConceding goals\nAccording to their xG against they should have conceded more goals than the six they did. As you can see, six goals is very unlikely. Even conceding less than ten goals only has a chance of less than 5%. They should have conceded somewhere around 14 or 15 goals. Are they lucky in that regard, or is there something else?\n\n\n\n\n\nWe will take a look at this later when we investigate some Benitez data.\n\n\nxG Per game\n\n\n\n\n\nAbove you can see the xG PSV created (top row) and conceded (bottom) for every match this season. The games where they conceded the most xG were the games against the two teams that were in a crisis (Ajax) or would soon be (Vitesse). In the game versus Vitesse they had a penalty which means their NPxG was lower than Vitesse’s. The other games they won with more NPxG than their opponent. So like I said early, they deserve the spot in the table without a doubt.\n\n\nxThreat\n\n\n\n\n\nThe most dominant player in attacking passes is clearly Veerman, who really dominates the attacking midfield with his passes. It’s fun to see that on the left side Van Aanholt creates a lot as a back, but on the right side, the most threat is coming from attackers and midfielders. This could be due to some injuries or rotation, but even the per 90 names look almost the same.\n\n\n\n\n\n\n\n\nThe Players\nHonestly, I could dive into the data for so many players of this team. To avoid the risk of overkill, I only chose a few to review. If you want to see some data from other players, feel free to contact me on Twitter.\n\nBenitez\nLet’s begin in the back: Benitez. He only conceded 6 goals from 14.74 xG. Most of you know, that this stat doesn’t say much about Benitez’ qualities. If the opposite players shot all their chances out of the stadium, the xG would still be the same. Lukily we have PsxG/xGOT to qualify the shots instead of the chances.\n\n\n\n\n\nOpta gives PSV’s opposition a PSxG of 9.6. So yeah, they do finish their chances sub par. But even then, Benitez is preventing 3.6 goals. That’s a lot from 9.6 PSxG. In other words: he’s preventing 37.5% of PSV’s goals against. In absolute numbers, only Barkas and Olij match him with 3.6 and 3.5 goals prevented, but that’s from 26.6 and 25.5 PSxG. So yeah, PSV is maybe lucky with the finishing abilities of the teams they faced, but on top of that, Benitez is having a great season.\n\n\nLuuk de Jong\n\n\n\n\n\nPSV is finishing their 51.14 xG with 46.6 PSxG, so not that deadly. Their joint top goalscorer is Luuk de Jong with “only” eleven goals of which four were penalties. Those are not the numbers you would expect from the striker of a team that scored 56 goals already. Pavlidis and Gimenez are on 18 and their teams “only” scored 35 en 48 goals. But that’s probably the strength of this PSV, a lot of players know how to score a goal. And of course De Jong brings more than just goals to this team (he has 7 assists), but his lack of goals is something that stands out for me.\n\n\nJoey Veerman\nBy far their most dangerous passer of the team is Veermanas we saw earlier. With his open play passes he created an xThreat of 3.64. Only Sugaware does this better with 4.38 in about the same minutes.\n\n\n\n\n\nBesides that he assisted 72 shots, by far the most of the whole league.\n\n\n\n\n\nJust to show that those passes were not only to a player that loves to shoot from far, here is the top 10 xA and their assists this season.\n\n\n\n\n\nAs you can see, he creates a lot. You can also see another PSV player: Bakayoko. A player a lot of people were happy to let him go to PSG for peanuts, but he proves them wrong with a great season.\nAs I said, I could highlight almost every player. From a lot of players (e.g. Lang, Schouten, Lozano) we/I knew their quality, but Saibari really surprises me this season.  His numbers are great and he is a joy to watch. He seems to get fitter and better every week I watch him."
  },
  {
    "objectID": "posts/2023-23-12_PSV/index.html#well-how-insane-is-psv",
    "href": "posts/2023-23-12_PSV/index.html#well-how-insane-is-psv",
    "title": "How insane is PSV?",
    "section": "Well, how insane is PSV?",
    "text": "Well, how insane is PSV?\nVery. They dominate most stats and they are playing great attacking football, with a squad that is way bigger and better than just te first eleven. After a difficult season it is admirable what Peter Bosz achieved in a short time. They were a team that was depending on Xavi’s brilliant actions, but are now a team where everyone knows their role and knows how to execute it."
  },
  {
    "objectID": "passesfeb.html",
    "href": "passesfeb.html",
    "title": "Passing",
    "section": "",
    "text": "Assists, xT and xA Eredivisie 2022/2023\nTable sorted on Assists and xA"
  },
  {
    "objectID": "stuff.html",
    "href": "stuff.html",
    "title": "Other stuff I do",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nTwitter\n\n\n\n\n\n\n\n\n\n\n\n\n\nPodcasts\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2021-02-04_Giakoumakis/index.html",
    "href": "posts/2021-02-04_Giakoumakis/index.html",
    "title": "Extraordinary Giakoumakis",
    "section": "",
    "text": "Giakoumakis stays with VVV for at least the rest of the season. He scored 21 goals (6 penalties) already this season. Is he really that good? Let’s find out if a bigger club should go after him this summer.  He had 15 non penalty goals. His shot map looks great. Very few shots from outside the penalty box and a lot of central shots. His NPxG is 8.46, which already shows his overperformance.\n\n\n\n\n Let’s take a closer look at the xG of his chances. I divided his chances in 0.1 xG bins. We see that most of his chances are really small (&lt; 0.1 xG), but he scores relative many of those chances(4 from 36). The same goes for the 0.1-0.2 bin where he scored 4 from 12. What can we do with xPoints and do we need it?\n\n\n\n\n So, how extraordinary is this? I’ve simulated all his non penalty shots a million times to see how much he would score. As we can see, the chance that he scores 15 of them is only a few percent! Scoring only 3 goals is more likely than the 15 he has!\n\n\n\n\n If we look at the minimum number of goals scored in the simulations, we see that he has an almost 50% chance of scoring at least 9 goals. The chance at scoring 11 or more goals is less than 25%\n\n\n\n\nWill he continue this form the rest of the season? Possible, but unlikely. Will he manage this next season as well? Even more unlikely.\nVVV should’ve sold him already in my opinion as they are safe from relegation. Now they should certainly sell him at the end of the season."
  },
  {
    "objectID": "posts/2021-03-03_Expected-points/index.html",
    "href": "posts/2021-03-03_Expected-points/index.html",
    "title": "Expected Points",
    "section": "",
    "text": "This post is about Expected Points\nRead the Dutch version of this article here\nYou probably read already about it, or saw it in some tweet/picture/anything, Expected Points. From understat to Opta, they are all using it. There are some different ways to calculate it though. In this article I will tell you my method, the method we use for our dashboard at Tussen de Linies\n #### XPOINTS? What can we do with xPoints and do we need it?\nWe can use xPoints to see where we may expect a team in the league table. In short: it is a way to show how well they perform this season, looking at their shots.\nRaw xG numbers don’t say everything, as the quality of the chances plays a role as well.\n\nAN EXAMPLE\nLet’s take a look at the game FC Groningen against FC Twente. The game ended in 2-2 with xG 1.9 and 1.5. In the table you’ll see the chances for both teams to win.\n\n\n\nAs you can see, the xG of Groningen is 0.5 higher (almost 36%), but the chance to win is 86% percent higher. The size of the chances is what decides the difference.\n\n\nHOW BIG ARE THE CHANCES?\n\n\n\nBesides the two goals, Groningen has a lot of medium sized chances. Twente has three good chances, but not much else. For getting the chance to win and so the expected points, we will simulate those chances. \n\n\n\nTHE CALCULATION\nFor every shot we draw a random number between 0 and 1. Everytime this number is smaller than the xG of that shot, the shot becomes a goal. After we’ve done this for every shot in the match, we got a number of home- and away goals and so a result (home win/draw/away win). We simulate a match this way for ten thousand times. Each result is stored and after all the simulations we count the number of different results to determine the chance for both teams to win. It’s simple the perentage of simulations resulting in that specific result.\nAfter we have those chances, we multiply the chance to win with 3 and the chance for a draw with 1 for both teams. So: Groningen 49.04% * 3 punten + 24.72% * 1 punt = 1.72\nThose calculations will give us a number of points that we call Expected Points. Doing this for a whole season will give us an Expected Rank. In this match, Groningen didn’t got enough with there 1 real point, but over the whole season they got too many points.\n\n\n\nTHE PROBLEM(S)\nGame state is very much resposible for the way a team acts. If you’re leading by an early goal, the urge to attack fades away. The opponent will attack instead and will get a higher xG with every shot they take. If they don’t score, they keep attacking without scoring. So the xG skews in their favour, even if their chances are poor. Scoring 2 or 3 goals from less than 1 xG in the beginning of the game will also have this result, as the opponent must attack and have a comfortable lead.\nThe experience learns us that over a whole season, xPoints is good in giving us a fair picture about the teams in a competition.\n\n\nHOW DOES X PERFORM OVER TIME?\nIf you want to see a xPoints timeline of you’re favorite Eredivisie team, hit me up on Twitter!"
  },
  {
    "objectID": "Work.html",
    "href": "Work.html",
    "title": "Work",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "me.html",
    "href": "me.html",
    "title": "Getting Blue Fingers",
    "section": "",
    "text": "test"
  },
  {
    "objectID": "stuff/twitter/index.html",
    "href": "stuff/twitter/index.html",
    "title": "Twitter",
    "section": "",
    "text": "Besides my personal Twitter profile, I also made a bot to post a dashboard every Eredivisie game. This was mostly to teach myself some more coding. You can see both accounts here."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "My name is Robin Koetsier. I’m currently a data engineer at Fugro Netherlands through Alten. In my free time I like to write or talk about football. In the menu you can find the podcasts and articles from ‘Tussen de linies’. Under ‘Posts’ you can see the few posts I wrote for this site and I also made some tutorials.\nI do most of my visualisations in R and sometimes in Python. I you have any questions or need some help with these languages, shoot me a message on Twitter.\nThe Eredivisie stats are made with event data. The xG model I made myself using XGBoost in R. My twitterbot @Eredivisieplots is running on a Raspberry Pi 3 and uses Python and R to get the data and make the dashboard.\nI also made a dashboard in Tableau a few season ago to visualize the birth places of player in the Eredivisie and the KKD.\nThose are my skills that are relevant skill for my site."
  },
  {
    "objectID": "shotsfeb.html",
    "href": "shotsfeb.html",
    "title": "Shooting",
    "section": "",
    "text": "Shots and xG Eredivisie 2022/2023\nTable sorted on NP-Goals and NPxG"
  },
  {
    "objectID": "d3/sim/index.html",
    "href": "d3/sim/index.html",
    "title": "RAW HTML CONTENT",
    "section": "",
    "text": "&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;D3.js - Bar Chart&lt;/title&gt;\n  &lt;script src=\"https://d3js.org/d3.v7.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"&gt;&lt;/script&gt;\n  &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css\" rel=\"stylesheet\" /&gt;\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js\"&gt;&lt;/script&gt;\n  &lt;style&gt;\n    #dropdown {\n      width: 300px; /* Adjust the width as desired */\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Bar Chart&lt;/h1&gt;\n  &lt;select id=\"dropdown\"&gt;&lt;/select&gt;\n  &lt;div id=\"chart\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n    // Helper function to load CSV data\n    function loadCSV(filename) {\n      return new Promise(function(resolve, reject) {\n        d3.csv(filename).then(function(data) {\n          resolve(data);\n        }).catch(function(error) {\n          reject(error);\n        });\n      });\n    }\n\n    d3.csv(\"names.csv\").then(function(data) {\n      var uniqueValues = Array.from(new Set(data.map(function(d) { return d['a']; })));\n\n      //uniqueValues = uniqueValues.slice(0, 10); // Limit to the first 10 unique values\n\n      // Create the select2 searchable drop-down\n      $(\"#dropdown\").select2({\n        data: uniqueValues\n      });\n\n      // Event listener for drop-down change\n      $(\"#dropdown\").on(\"change\", function() {\n        var selectedValue = $(this).val();\n\n        // Load CSV data based on selected value\n        loadCSV('Players/'+selectedValue + \".csv\").then(function(filteredData) {\n          // Clear previous chart\n          d3.select(\"#chart\").html(\"\");\n\n          // Define chart dimensions\nvar width = 700;\nvar height = 500;\n\n// Define margin\nvar margin = { top: 25, right: 20, bottom: 50, left: 200 };\n\n// Calculate the inner width and height of the chart\nvar innerWidth = width - margin.left - margin.right;\nvar innerHeight = height - margin.top - margin.bottom;\n\n// Create SVG element\nvar svg = d3.select(\"#chart\")\n  .append(\"svg\")\n  .attr(\"width\", \"100%\") // Set the SVG width to 100% of the container\n  .attr(\"height\", height)\n  .append(\"g\")\n  .attr(\"transform\", \"translate(\" + (width / 2) + \",\" + margin.top + \")\"); // Center the graph horizontally\n\n// Create x-scale\nvar xScale = d3.scaleLinear()\n  .domain([0, d3.max(filteredData, function(d) { return parseFloat(d.Similarity); })])\n  .range([0, innerWidth]);\n\n          // Create y-scale\nvar yScale = d3.scaleBand()\n  .domain(filteredData.map(function(d) { return d['Player 2']; }))\n  .range([0, innerHeight])\n  .padding(0.1);\n\n// Limit y-axis domain to only the values present in the filtered data\nyScale.domain(filteredData.map(function(d) { return d['Player 2']; }));\n\n// Display the data rows sorted by \"Similarity\" in descending order\nfilteredData.sort(function(a, b) {\n  return parseFloat(b.Similarity) - parseFloat(a.Similarity);\n});\n\n// Limit to the top 15 values\nfilteredData = filteredData.slice(0, 20);\n          // Create y-scale\nvar yScale = d3.scaleBand()\n  .domain(filteredData.map(function(d) { return d['Player 2']; }))\n  .range([0, height - 50])\n  .padding(0.1);\n\n// Limit y-axis domain to only the values present in the filtered data\nyScale.domain(filteredData.map(function(d) { return d['Player 2']; }));\n\n// Create x-scale\nvar xScale = d3.scaleLinear()\n  .domain([0, d3.max(filteredData, function(d) { return parseFloat(d.Similarity); })])\n  .range([0, innerWidth]);\n\n// Add chart title\nsvg.append(\"text\")\n  .attr(\"class\", \"chart-title\")\n  .attr(\"x\", innerWidth / 2)\n  .attr(\"y\", -margin.top / 2)\n  .attr(\"text-anchor\", \"middle\")\n  .text(\"Player similar to \" + selectedValue);\n\n// Create bars\nsvg.selectAll(\"rect\")\n  .data(filteredData)\n  .enter()\n  .append(\"rect\")\n  .attr(\"x\", 0) // Move the bars to the left edge of the chart\n  .attr(\"y\", function(d) { return yScale(d['Player 2']); })\n  .attr(\"width\", function(d) { return xScale(parseFloat(d.Similarity)); })\n  .attr(\"height\", yScale.bandwidth())\n  .attr(\"fill\", \"steelblue\");\n\n  \n\n// Create value labels\nsvg.selectAll(\".value-label\")\n  .data(filteredData)\n  .enter()\n  .append(\"text\")\n  .attr(\"class\", \"value-label\")\n  //.attr(\"x\", 40) // Position the labels in the center of each bar\n  .attr(\"y\", function(d) { return yScale(d['Player 2']) + yScale.bandwidth() / 2; }) // Position the labels vertically centered within each bar\n  .attr(\"dy\", \"0.35em\") // Adjust the vertical alignment of the labels\n  .text(function(d) { return parseFloat(d.Similarity).toFixed(2); }) // Display the rounded value of the bar with 2 decimal places\n  .attr(\"text-anchor\", \"right\") // Align the labels to the right\n  .attr(\"fill\", \"white\") // Set the text color to white for better visibility\n  .style(\"font-size\", \"12px\"); // Set the font size to 12 pixels\n\n// Mouseover event handler\nfunction handleMouseOver(d) {\n  d3.select(this)\n    .attr(\"fill\", \"orange\");\n}\n\n// Mouseout event handler\nfunction handleMouseOut(d) {\n  d3.select(this)\n    .attr(\"fill\", \"steelblue\");\n}\n\n// Create y-axis\nsvg.append(\"g\")\n  .call(d3.axisLeft(yScale))\n  .selectAll(\"text\")\n  .attr(\"dy\", \"0.55em\") // Adjust the vertical alignment of the labels\n  .attr(\"x\", -10) // Move the labels slightly to the left\n  .attr(\"text-anchor\", \"end\") // Align the labels to the end of the tick\n // .attr(\"transform\", \"rotate(-20)\"); // Rotate the labels for better readability\n\n\n          // Create x-axis\n          svg.append(\"g\")\n            .attr(\"transform\", \"translate(50, \" + (height - 50) + \")\")\n            .call(d3.axisBottom(xScale));\n\n          \n\n        }).catch(function(error) {\n          console.log(error);\n        });\n      });\n    });\n    \n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;"
  },
  {
    "objectID": "rankfeb.html",
    "href": "rankfeb.html",
    "title": "xRank",
    "section": "",
    "text": "Expected Points Eredivisie 2022/2023\nLeague table sorted on xPoints\n\n\n\nBased on simulating every shot in every match\nLast update: \n2024-05-22"
  },
  {
    "objectID": "Schoten.html",
    "href": "Schoten.html",
    "title": "Getting Blue Fingers",
    "section": "",
    "text": "Shots and xG Eredivisie 2022/2023\nTable sorted on NP-Goals and NPxG\n\n\n\n\n\n\n\n\n Download table as xlsx"
  },
  {
    "objectID": "tutorials/2022-10-18_xpoints-table/index.html",
    "href": "tutorials/2022-10-18_xpoints-table/index.html",
    "title": "xPoints",
    "section": "",
    "text": "INTRO\nNow that expected goals get more common and accepted, more people are realising that it is mostly for rating a teams performance over more matches. Because some matches will skew the xG of a team, we can use expected points to see how well they perform against there underlying numbers. To read more about expected points an how we calculate it, you can read this article from me. In short: we look at the size of the chances to see how much points a team deserved in a match instead of only looking at the total xG.\nLOADING THE PACKAGES\nMake sure you have the newest version of worldfootballR.\n\n# devtools::install_github(\"JaseZiv/worldfootballR\")\nlibrary(tidyverse)\nlibrary(worldfootballR)\n\nGETTING THE MATCH DATA\nAs we are simulating every shot in every match multiple times, we need to load all the shots from the competition we want to use.\n\n#get match id's\nleague_matches &lt;- fotmob_get_league_matches(\n  country =     \"ENG\",\n  league_name = \"Championship\"\n) \n\n#filter out matches in the future\nleague_matches &lt;- league_matches %&gt;%\n  filter(league_matches$status$reason$short == \"FT\") \n\n#get matches for those id's\nmatch_details &lt;- fotmob_get_match_details(league_matches$id)\n\n\n# unnest the shots only needed in older versions of worldfootballR so commented it out) \n# and add team name of team shooting and team conceding (\nshots_temp &lt;- match_details %&gt;%\n  #unnest(shots) %&gt;%\n  mutate(team_name = case_when(team_id == home_team_id ~ home_team,\n                              team_id == away_team_id ~ away_team),\n         opponent = case_when(team_id == home_team_id ~ away_team,\n                              team_id == away_team_id ~ home_team))\n\nIf you want all the leagues and their id’s/names/countries, read the csv from github\n\nleagues &lt;- read.csv(\"https://raw.githubusercontent.com/JaseZiv/worldfootballR_data/master/raw-data/fotmob-leagues/all_leagues.csv\")\nhead(leagues)\n\n  ccode       country   id                 name\n1   INT International   42     Champions League\n2   INT International   73        Europa League\n3   INT International  525 AFC Champions League\n4   INT International 9469              AFC Cup\n5   INT International 9841              AFC U19\n6   INT International 9265       AFF Suzuki Cup\n                                    page_url\n1      /leagues/42/overview/champions-league\n2         /leagues/73/overview/europa-league\n3 /leagues/525/overview/afc-champions-league\n4             /leagues/9469/overview/afc-cup\n5             /leagues/9841/overview/afc-u19\n6      /leagues/9265/overview/aff-suzuki-cup\n\n\nView the data frame and search in it!\nTABLE WITH XG PER TEAM\nFirst we make a table with the xG for and against of every team. This is also possible through worldfootballR, but the function doesn’t work at the moment.\n\nFunction that currently doesn’t work\nere_team_xg_2022 &lt;- fotmob_get_season_stats(\n  league_id = 48, #48 is the code for the Championship\n  season_name = \"2022/2023\",\n  stat_name = \"Expected goals\",\n  team_or_player = \"team\"\n)\n\nxG_table &lt;- shots_temp %&gt;%\n  mutate(expected_goals = replace_na(expected_goals,0)) %&gt;% #replace the NA for own goals to 0\n  group_by(team_name) %&gt;%\n  summarise(xGF = sum(expected_goals)) %&gt;% #xG for\n  left_join(shots_temp %&gt;% #join with xG against\n  mutate(expected_goals = replace_na(expected_goals,0)) %&gt;%\n  group_by(opponent) %&gt;%\n  summarise(xGA = sum(expected_goals)),by=c(\"team_name\" = \"opponent\"))\nhead(xG_table)\n\n# A tibble: 6 × 3\n  team_name          xGF   xGA\n  &lt;chr&gt;            &lt;dbl&gt; &lt;dbl&gt;\n1 Birmingham City   15.2  17.6\n2 Blackburn Rovers  14.4  18.2\n3 Blackpool         16.4  21.9\n4 Bristol City      18.6  21.8\n5 Burnley           17.5  14.0\n6 Cardiff City      13.7  13.9\n\n\nNice, so we have the xG of the teams. Note that you can also filter shots_temp to exclude penalties. I keep them in as I want to make a table with the complete xG and xPoints picture.\nNow for the hard part, calculating the xPoints per match. To calculate it, we will build a function to simulate every shot in the match. We do that ten thousand times and count the times every team wins/draws/loses. To get some more info, read the calculation in my old article about it.\nCALCULATE XPOINTS\nSo first we make the function to simulate all the shots. It is an old function of mine that contains other functions as well. The easiest is to copy all the functions and just paste them in a new rscript.\n\nthe functions\n\n# main function\ncalculateChance&lt;-function(team1,team2,p){\n\n  home = 0\n  away = 0\n  draw = 0\n  homeP = 0\n  awayP = 0\n  drawP = 0\n  \n  for(i in 1:p){\n    matchWinner &lt;- calculateWinner(team1,team2)\n    \n    if(matchWinner == \"home\"){\n      home &lt;- home+1\n      homeP &lt;- homeP+3\n    }else if(matchWinner == \"away\"){\n      \n      away &lt;- away+1\n      awayP &lt;- awayP+3\n    }else{\n      draw &lt;- draw +1\n      awayP &lt;- awayP+1\n      homeP &lt;- homeP+1\n    }\n  }\n  \n  home = paste0(home/(p/100),\"%\")\n  away = paste0(away/(p/100),\"%\")\n  draw = paste0(draw/(p/100),\"%\")\n  homeP = homeP/p\n  awayP = awayP/p\n  \n  chances &lt;- paste0(\"Home win: \",home,\"% | Draw: \",draw,\"% | Away win: \",away,\"%\")\n  game &lt;- data.frame(home,draw,away,homeP,awayP)\n  return(game)\n}\n\n# function that returns if a shot becomes a goal and counts the goals\ntestShots&lt;-function(XG){\n  Goals = 0\n  XG[is.na(XG)] &lt;- 0\n  for(i in 1:length(XG)){\n    if(runif(1, 0.0, 1.0)&lt;=XG[i]){\n      \n      Goals &lt;- Goals + 1\n    }else{\n      \n    }\n  }\n  \n  return(Goals)\n}  \n\n# function that calculates the winner by comparing the number of goals of the two teams\ncalculateWinner &lt;- function(home,away){\n  HomeGoals = 0\n  AwayGoals = 0\n  \n  HomeGoals &lt;- testShots(home)\n  AwayGoals &lt;- testShots(away)\n  \n  #diffTemp &lt;- (HomeGoals - AwayGoals)\n  \n  #diff &lt;- append(diff,diffTemp)\n  if(HomeGoals &gt; AwayGoals){\n    \n    return(\"home\")\n  }else if(AwayGoals &gt; HomeGoals){\n    \n    return(\"away\")\n  }else{\n    \n    return(\"draw\")\n  }\n}\n\nTo use this function on the data frame of all the shots we are going to wrap it in a function so we can use it easier. The 10000 is the times we simulate every match. You can put it higher, but you’ll have to wait longer for the results.\n\nplot_func &lt;- function(df){\n  calculateChance(pull(df %&gt;% filter(team_id == home_team_id),expected_goals),\n                                      pull(df %&gt;% filter(team_id == away_team_id),expected_goals),\n                                      10000)\n}\n\nAnd than just use it.\n\ndf &lt;- shots_temp %&gt;%\n  group_by(match_id) %&gt;%\n  nest() %&gt;%\n  mutate(result = map(data, plot_func)) %&gt;%\n  ungroup() %&gt;%\n  unnest(result)\nhead(df)\n\n# A tibble: 6 × 7\n  match_id data               home   draw   away   homeP awayP\n     &lt;int&gt; &lt;list&gt;             &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1  3915324 &lt;tibble [18 × 43]&gt; 3.07%  32.8%  64.13% 0.420 2.25 \n2  3915311 &lt;tibble [13 × 43]&gt; 23.4%  65.91% 10.69% 1.36  0.980\n3  3915310 &lt;tibble [22 × 43]&gt; 18.08% 29.35% 52.57% 0.836 1.87 \n4  3915302 &lt;tibble [9 × 43]&gt;  5.82%  68.97% 25.21% 0.864 1.45 \n5  3915309 &lt;tibble [24 × 43]&gt; 52.59% 28.04% 19.37% 1.86  0.862\n6  3915308 &lt;tibble [26 × 43]&gt; 55.47% 26.45% 18.08% 1.93  0.807\n\n\nLet’s join this with the data frame which contains the matches and teams\n\ntotal_df &lt;- df %&gt;%\n  select(match_id,homeP,awayP) %&gt;%\n  left_join(match_details %&gt;% \n              group_by(match_id,home_team,away_team) %&gt;% \n              nest()) \n\nJoining, by = \"match_id\"\n\n# if you unnested the match_details earlier, you can just join by 'match_id'\n\n# and sum all the xPoints per team\nxpoints &lt;- total_df %&gt;%\n  group_by(home_team) %&gt;%\n  summarise(pointsH = sum(homeP)) %&gt;%\n  left_join(total_df %&gt;%\n              group_by(away_team) %&gt;%\n              summarise(pointsA = sum(awayP)),by =c(\"home_team\"=\"away_team\")) %&gt;%\n  mutate(xPoints = pointsH + pointsA)\nhead(xpoints)\n\n# A tibble: 6 × 4\n  home_team        pointsH pointsA xPoints\n  &lt;chr&gt;              &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 Birmingham City     9.68    8.79    18.5\n2 Blackburn Rovers   10.7     7.55    18.3\n3 Blackpool           7.60    8.13    15.7\n4 Bristol City       10.6     7.73    18.3\n5 Burnley            11.7    10.2     21.9\n6 Cardiff City        9.83    7.83    17.7\n\n\nGET CURRENT LEAGUE TABLE\nTo make our own table complete, we need just one more data frame: the actual league table. I will show you the code of the function, but this one doesn’t work for me. If you use this function, be aware the every column name has the prefix ‘table_’ and that those do not appear in my code!\n\nworldfootballR FotMob function to get table\ntable &lt;- fotmob_get_league_tables(\n  country =     \"ENG\",\n  league_name = \"Championship\"\n)\nI dove in the code to find the place where the table should be and found it, so you can copy the code beneath.\n\nsafely_from_json &lt;- purrr::safely(jsonlite::fromJSON, otherwise = NULL, quiet = TRUE)\njsonn &lt;- safely_from_json(\"https://www.fotmob.com/api/leagues?id=48\") \ntable &lt;- data.frame(jsonn$result$table$data$table$all)\n\nNote the id=48 part at the end of the url. Change that to the desired competition code that you can find in the csv mentioned earlier.\nJOIN TABLES\nNow we “just” have to join these three data frames together. We select the id column as well, as it makes it easy to add the club logo.\n\nxptable &lt;- table %&gt;%\n  left_join(xpoints, by=c(\"name\" = \"home_team\")) %&gt;%\n  separate(scoresStr, c(\"GF\", \"GA\"),\"-\") %&gt;%\n  mutate(GF = as.numeric(GF),\n         GA = as.numeric(GA),\n         GD = GF - GA) %&gt;%\n  \n  select(idx,id, name, played, wins,draws,losses,GF,GA,GD,pts,xPoints) %&gt;%\n  arrange(-xPoints) %&gt;%\n  mutate(xRank = c(1:length(table$name))) %&gt;%\n  left_join(xG_table, by = c(\"name\" = \"team_name\")) %&gt;%\n  mutate(xGD = xGF - xGA)\n\nLet’s arrange the table in the desired output.\n\nxptable &lt;- xptable %&gt;%\n  select(idx,id,name,played,wins,draws,losses,GF,GA,GD,pts,xGF,xGA,xGD,xPoints,xRank) %&gt;%\n  `colnames&lt;-`(c(\"RANK\",\"id\", \"TEAM\", \"P\",\"W\",\"D\",\"L\",\"GF\",\"GA\",\"GD\",\"PTS\",\"xGF\",\"xGA\",\"xGD\",\"xPTS\",\"xRANK\"))\n\nThe club logo’s can be found at the following url: https://images.fotmob.com/image_resources/logo/teamlogo/{id}.png. So we can change the column that has the id’s so that it will contain the url to the logo. This will make it super easy to add the logo to the table.\n\nxptable &lt;- xptable %&gt;%\n  mutate(id = glue::glue(\"https://images.fotmob.com/image_resources/logo/teamlogo/{id}.png\"))\n\nThe best way about this is that now the whole code is fool proof for every competition thtat FotMob has xG data for. Just change the name and competition code in a few functions and you’’ll get the table WITH the correct logo’s.\nMAKING THE TABLE\nI use reactable for the table on my site, as it is interactive. For this tutorial I’m using gt and gtExtras as those packages work great for static tables on websites. Just use the package you like the most. Here you can find the documentation on {gt} and a lot of other packages to make tables. Just pick the one you like the most. gt let’s you use HTML and I copied some code from the creator.\n\nlibrary(gt)\n\nadd_rank_color &lt;- function(col1,col2){\n  add_color &lt;- if (col1 &lt; col2) {\n    \"background:#61B861;\"\n  } else if (col1&gt;col2) {\n    \"background:#FC785F;\"\n  } else if (col1 == col2) {\n    \"background:#FDD297;\"\n  }\n  div_out &lt;- htmltools::div(\n    style = paste(\n      \"width: 20px;\n  height: 20px;\n  border: 1px solid rgba(0, 0, 0, 0.03);\n  border-radius: 50%;\ntext-align: center;\n  align-item: right;\n   margin-left: 15px;\n#  color: #000;\n  font-size: 13px;\n      font-weight:bold;\",\n      add_color\n    ),col1\n  )\n  \n  as.character(div_out) %&gt;% \n    gt::html()\n}\n\nAs I keep it simple/lazy, I just want to copy my xRank table but with a gt instead of reactable. The code is a bit messy as I normally keep my gt tables simpler.\nSo the above function colours the ‘RANK’ and ‘xRANK’ column according to which of the two is better/worse. This is so that I can use it in the code below that creates the table. The function has some css in there as well.\n\nlibrary(gtExtras)\nxptable %&gt;%\n  mutate(\n    RANK_temp = RANK,\n    RANK = map2(RANK, xRANK, add_rank_color),\n    xRANK = map2(xRANK, RANK_temp, add_rank_color)\n  ) %&gt;%\n  select(-RANK_temp) %&gt;%\n  gt() %&gt;%\n  gt_img_rows(columns = id, img_source = \"web\", height = 17) %&gt;%\n  cols_label(\n    id = \" \"\n  ) %&gt;%\n  fmt_number(\n    columns = c(xGF,xGA,xGD,xPTS),\n    decimals = 1\n  ) %&gt;%\n  cols_align(\n    align = \"center\",\n    columns = c(P:xRANK)\n  ) %&gt;%\n  tab_style(\n    style = list(\n      \n      cell_borders(\n        sides = \"left\",\n        color = \"black\",\n        weight = px(3)\n      )\n      \n    ),\n    locations = list(\n      cells_body(\n        columns = c(P,xGF)\n      )\n    )\n  ) %&gt;%\n  tab_spanner(\n    label = \"LEAGUE TABLE\",\n    columns = c(\n      RANK:PTS\n    )\n  ) %&gt;%\n  tab_spanner(\n    label = \"EXPECTED TABLE\",\n    columns = c(\n      xGF:xRANK\n    )\n  )  %&gt;%\n  cols_width(\n    c(xGF:xPTS) ~ px(60),\n    #c(RANK,xRANK) ~ px(30),\n   TEAM ~ 150,\n    everything() ~ px(50)\n  ) %&gt;% tab_style(\n    locations = cells_column_labels(columns = everything()),\n    style     = list(\n      cell_borders(sides = \"bottom\", weight = px(3)),\n      cell_text(weight = \"bold\")\n    )\n  ) %&gt;% tab_style(\n    locations = list(\n      cells_body(\n        columns = c(PTS,xPTS)\n      )\n    ),\n    style = list(\n      cell_text(weight = \"bold\")\n    )\n  ) %&gt;%\n  opt_table_font(font = \"Roboto Mono\") %&gt;%\n  tab_options(\n    row.striping.background_color = \"#F6F8FA\",\n    row.striping.include_table_body = TRUE,\n    data_row.padding = px(2),\n    table.border.top.style = \"hidden\",\n    #table.border.bottom.style = \"hidden\",\n    table.font.size = \"12px\"\n  ) %&gt;%\n  tab_header(md(\"**LEAGUE TABLE BASED ON EXPECTED POINTS**\")) %&gt;%\n   tab_source_note(\n    source_note = \"xPoints calculated by simulating every shot in a match\"\n  )%&gt;%\n   tab_source_note(\n    source_note = \"Data from Opta via FotMob\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLEAGUE TABLE BASED ON EXPECTED POINTS\n    \n\n\n\n        LEAGUE TABLE\n      \n      \n        EXPECTED TABLE\n      \n    \n\nRANK\n       \n      TEAM\n      P\n      W\n      D\n      L\n      GF\n      GA\n      GD\n      PTS\n      xGF\n      xGA\n      xGD\n      xPTS\n      xRANK\n    \n\n\n\n3\n\nNorwich City\n14\n7\n3\n4\n21\n15\n6\n24\n20.4\n14.7\n5.7\n23.6\n1\n\n\n20\n\nWest Bromwich Albion\n14\n2\n8\n4\n19\n18\n1\n14\n19.8\n14.4\n5.4\n23.2\n2\n\n\n22\n\nMiddlesbrough\n14\n3\n4\n7\n15\n20\n-5\n13\n18.2\n13.2\n5.0\n23.0\n3\n\n\n2\n\nSheffield United\n14\n7\n4\n3\n24\n13\n11\n25\n21.4\n13.2\n8.1\n23.0\n4\n\n\n7\n\nLuton Town\n14\n5\n6\n3\n19\n14\n5\n21\n17.2\n12.4\n4.8\n22.6\n5\n\n\n1\n\nBurnley\n14\n6\n7\n1\n24\n12\n12\n25\n17.5\n14.0\n3.5\n21.9\n6\n\n\n10\n\nWatford\n14\n5\n5\n4\n19\n17\n2\n20\n17.1\n14.5\n2.6\n21.0\n7\n\n\n15\n\nWigan Athletic\n14\n5\n4\n5\n15\n18\n-3\n19\n16.7\n14.7\n2.0\n20.3\n8\n\n\n8\n\nSwansea City\n14\n6\n3\n5\n17\n20\n-3\n21\n17.0\n15.6\n1.4\n20.2\n9\n\n\n11\n\nMillwall\n14\n6\n2\n6\n17\n18\n-1\n20\n17.8\n17.2\n0.6\n19.9\n10\n\n\n6\n\nReading\n14\n7\n1\n6\n15\n20\n-5\n22\n15.2\n14.6\n0.6\n19.9\n11\n\n\n4\n\nQueens Park Rangers\n14\n7\n3\n4\n20\n16\n4\n24\n16.3\n15.8\n0.4\n19.5\n12\n\n\n9\n\nSunderland\n14\n5\n5\n4\n19\n14\n5\n20\n15.0\n15.3\n−0.3\n18.8\n13\n\n\n12\n\nBirmingham City\n14\n5\n4\n5\n14\n12\n2\n19\n15.2\n17.6\n−2.4\n18.5\n14\n\n\n17\n\nBristol City\n15\n5\n3\n7\n23\n24\n-1\n18\n18.6\n21.8\n−3.3\n18.3\n15\n\n\n5\n\nBlackburn Rovers\n15\n8\n0\n7\n18\n17\n1\n24\n14.4\n18.2\n−3.9\n18.3\n16\n\n\n14\n\nPreston North End\n15\n4\n7\n4\n8\n10\n-2\n19\n14.6\n17.2\n−2.5\n17.9\n17\n\n\n18\n\nCardiff City\n14\n5\n3\n6\n12\n14\n-2\n18\n13.7\n13.9\n−0.2\n17.7\n18\n\n\n13\n\nStoke City\n14\n5\n4\n5\n17\n17\n0\n19\n16.1\n19.0\n−2.9\n17.5\n19\n\n\n19\n\nBlackpool\n14\n4\n4\n6\n16\n20\n-4\n16\n16.4\n21.9\n−5.5\n15.7\n20\n\n\n16\n\nRotherham United\n13\n4\n6\n3\n15\n13\n2\n18\n14.1\n17.3\n−3.2\n15.4\n21\n\n\n24\n\nCoventry City\n11\n2\n4\n5\n9\n14\n-5\n10\n12.9\n14.8\n−1.9\n13.5\n22\n\n\n23\n\nHuddersfield Town\n13\n3\n2\n8\n16\n21\n-5\n11\n14.1\n19.4\n−5.3\n13.4\n23\n\n\n21\n\nHull City\n14\n4\n2\n8\n13\n28\n-15\n14\n13.8\n22.6\n−8.9\n12.5\n24\n\n\n\n\nxPoints calculated by simulating every shot in a match\n    \n\nData from Opta via FotMob\n    \n\n\n\n\n\nSOME NOTES\nAs FotMob only has the minute for every shot, it is impossible to take rebounds into account. So if a team has two consecutive shots the xG is just summed up instead of first being factored with each other. This will skew some results, but I think it’s a small error and every team will profit/be disadvantaged by it in the long run.\nAnother point is that gamestate will be a big factor in these calculations. If you’re playing to just score and sit back, the opponent will gather more xG in most cases till they score the equalizer. After that it’s probably fair game again, but the results are skewed a little. If the equalizer comes earlier, I think the current gamestate is just as fair but the xG and therefore xPoints are much lower."
  },
  {
    "objectID": "tutorials/2022-10-10_shot-areas/index.html",
    "href": "tutorials/2022-10-10_shot-areas/index.html",
    "title": "Shots on target",
    "section": "",
    "text": "Intro\nHi all!\nAs I intend to post more vizzes again I decided that I also really like to help others make the same kind of visualizations with data easily obtainable. Getting data is really made easy with the wordlfootballR package. Check the site out to see everything that can be done.\nToday we are going to use the function to scrape the data from FotMob. They use Opta data in their app, so that’s nice. I will try to make more innovative plots than just your average shot/pass map. Don’t get me wrong, I still make them all the time and even built a bot around it, but we can do better than that.\nWe are plotting the zones in the goal where the teams shoot. We are binning them (well, the function does it for us) and showing the percentage of the shots that end up in that bin/area of the goal.\n\n\nPREPARE ENVIRONMENT\nOf course you need the packages. For packages of which I use more than one function, I like to load them. For other uses, just using package::function() is good enough. You will see me use it later on.\nlibrary(worldfootballR) \nlibrary(tidyverse)\n\n\nGET AND PREPARE DATA\nWe want the match data from FotMob for all the Eredivisie matches played this season. To know which matches to scrape, we can use the following code.\nleague_matches &lt;- fotmob_get_league_matches(\n  country =     \"NED\",\n  league_name = \"Eredivisie\"\n) %&gt;%\nfilter(league_matches$status$reason$short == \"FT\") # only select the matches that are already played.\nNow we can feed the match id’s from this data frame to the next function. It will collect all the data from these matches, so it can take some time.\nmatch_details &lt;- fotmob_get_match_details(league_matches$id)\nIn this data frame, there is a column called ‘shots’. This has all the shots from that match in it with all the relevant data. To make live easier, you can unnest that column so you have a bigger data frame with every shot in there.\nshots_temp &lt;- match_details %&gt;%\n  unnest(shots)\nIn the next step we are going to filter the data so we only have the shots on target that are not blocked. I do this by looking at the ‘expected_goals_on_target’ column. In the same pipe we are adding the name of the team that takes the shot. I recommend this way over an ifelse() statement as it is easier to add more conditions in the future. If you want, you can filter the data so it only has shots from open play or just no penalties.\nshots_df &lt;- shots_temp %&gt;%\n  mutate(expected_goals_on_target = replace_na(expected_goals_on_target,0)) %&gt;%\n  filter(expected_goals_on_target&gt;0) %&gt;%\n  mutate(team_name = \n                  case_when(\n                          away_team_id == team_id ~ away_team,\n                          TRUE ~ home_team\n                  ))\n\n\nPLOTTING\nNow we can start to plot. From past visualizations I made, I know the coordinates of the goal. The bottom left corner is (0,0) and the top right corner is (2,0.6367725). I decided to make 12 areas, so we have to devide those numbers bij 4 and 3. Let’s plot the whole league first to get a feeling for how it will look.\nshots_df %&gt;%\n  ggplot(aes(on_goal_shot$x,on_goal_shot$y))+\n  stat_bin_2d(aes(on_goal_shot$x,on_goal_shot$y,fill=..count..),\n              binwidth = c(0.5, (0.6367725/3)),                     \n              drop=FALSE) \n\nLooks horrible, but the idea is clear. The most shots go to the area on the bottom, just right of the middle. To sort this by team, we can use a simple facet_wrap as you can see below.\nshots_df %&gt;%\n  ggplot(aes(on_goal_shot$x,on_goal_shot$y))+\n  stat_bin_2d(aes(on_goal_shot$x,on_goal_shot$y,fill=..count..),\n              binwidth = c(0.5, (0.6367725/3)),\n              drop=FALSE)+\n  facet_wrap(~team_name)\n\nNow we’re getting somewhere! I really prefer to see how the areas correspond with each other per team though. So I’m going to add some code to print the percentage of shots in each area per team. This prints a text with the percentage in every area and the ..PANEL.. parts make sure it is the percentage per team and not per competition.\nshots_df %&gt;%\n  ggplot(aes(on_goal_shot$x,on_goal_shot$y))+\n  stat_bin_2d(aes(on_goal_shot$x,on_goal_shot$y,fill=..count..),\n              binwidth = c(0.5, (0.6367725/3)),\n              drop=FALSE)+\n  stat_bin_2d(geom = \"text\", \n  aes(\n    label=paste0((100*(round((..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..],2))),\"%\")),\n  binwidth = c(0.5, (0.6367725/3)))+\n  facet_wrap(~team_name)\n\nWhen saved in the right ratio, it already looks okay(ish).\nThe next step is to make is look way better than it does.\n\n\nTHEMING THE PLOT\nThe things we want to do:\n\nDraw a goal\nchange font\nremove legend\nremove axis ticks/names/numbers\nmake it pretty\n\nshots_df %&gt;%\n  ggplot(aes(on_goal_shot$x,on_goal_shot$y))+\n  stat_bin_2d(aes(on_goal_shot$x,on_goal_shot$y,fill=..count..),\n              binwidth = c(0.5, (0.6367725/3)),\n              drop=FALSE)+\n  stat_bin_2d(geom = \"text\", size=3,colour=\"white\",\n              aes(\n                label=paste0((100*(round((..count..)/tapply(..count..,..PANEL..,sum)[..PANEL..],2))),\"%\")\n                \n              ), \n              \n              binwidth = c(0.5, (0.6367725/3)))+\n  #facet_wrap(~team_name)+\n  geom_segment(aes(x=0,xend=0,y=0,yend=0.66534392-0.028571429),colour=\"white\")+ #drawing a goal\n  geom_segment(aes(x=0-0.028571429,xend=0-0.028571429,y=0,yend=0.66534392),colour=\"white\")+ \n  geom_segment(aes(x=2,xend=2,y=0,yend=0.66534392-0.028571429),colour=\"white\")+\n  geom_segment(aes(x=2+0.028571429,xend=2+0.028571429,y=0,yend=0.66534392 ),colour=\"white\")+\n  geom_segment(aes(x=0,xend=2,y=0.66534392-0.028571429,yend=0.66534392-0.028571429),colour=\"white\")+\n  geom_segment(aes(x=0-0.028571429,xend=2+0.028571429,y=0.66534392,yend=0.66534392),colour=\"white\")+\n  scale_fill_gradient(low = \"#120E41\", high = \"#E172A8\")+ \n  labs(title= \"Where do the Eredivisie teams shoot on goal?\",\n       subtitle = \"Percentage of shots per area\",\n       caption = \"Data: Opta via FotMob\\n@RobinWilhelmus\")+\n  theme(plot.background = element_rect(fill = \"#120E41\", colour = \"#120E41\"),\n        panel.background = element_rect(fill = \"#120E41\", colour = \"#120E41\"),\n        legend.position = \"none\",\n        panel.grid = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text = element_blank(),\n        axis.title = element_blank(),\n        strip.background = element_rect(fill=\"#69C5D2\"),\n        strip.text = element_text(family = \"Spartan-Medium\", color= \"#120E41\"),\n        plot.title = element_text(family = \"Spartan-Bold\", colour=\"#69C5D2\",size=18),\n        plot.subtitle = element_text(family = \"Spartan-Bold\", colour=\"#69C5D2\",size=14),\n        plot.caption = element_text(family = \"Spartan-Light\", colour=\"#69C5D2\",size=10))\n  \n\nWell, this looks nice. At first I was really happy with this plot, but it bothers me that the 18% in PSV’s plot is more highlighted than the 21% for NEC Nijmegen. This is because the colours are the absolute values and the labels are per club. I looked for a way to change this and still using facet_wrap() but couldn’t find a way. I do however found another way. It’s a bit harder, but I will guide you through it.\n\n\nA BETTER WAY\nTo make the plot the way I decribe above, we need to use {patchwork}. To make it easy for ourselves. We will first create a function of the above plot. We change some things, because the function will output 18 different plots. One for each club. So we need to set the title for each club. Let’s take a look. The reason I do it this way is to avoid an if-loop. You can totally do it that way, but I learned to avoid them if possible.\nplot_func &lt;- function(df, name) {\ndf %&gt;%\n    \n    ggplot(aes(on_goal_shot$x,on_goal_shot$y))+\n    stat_bin_2d(aes(on_goal_shot$x,on_goal_shot$y,fill=..count..),\n                binwidth = c(0.5, (0.6367725/3)), colour=\"white\",linetype=\"dashed\",\n                drop=FALSE)+\n    stat_bin_2d(geom = \"text\", size=3,colour=\"white\",\n                aes(\n                  label=paste0((100*(round(..count../sum(..count..),2))),\"%\")\n                  \n                ), \n                \n                binwidth = c(0.5, (0.6367725/3)))+\n    \n    geom_segment(aes(x=0,xend=0,y=0,yend=0.66534392-0.028571429),colour=\"white\")+ #drawing a goal\n    geom_segment(aes(x=0-0.028571429,xend=0-0.028571429,y=0,yend=0.66534392),colour=\"white\")+ \n    geom_segment(aes(x=2,xend=2,y=0,yend=0.66534392-0.028571429),colour=\"white\")+\n    geom_segment(aes(x=2+0.028571429,xend=2+0.028571429,y=0,yend=0.66534392 ),colour=\"white\")+\n    geom_segment(aes(x=0,xend=2,y=0.66534392-0.028571429,yend=0.66534392-0.028571429),colour=\"white\")+\n    geom_segment(aes(x=0-0.028571429,xend=2+0.028571429,y=0.66534392,yend=0.66534392),colour=\"white\")+\n    scale_fill_gradient(low = \"#120E41\", high = \"#E172A8\")+ \n    labs(title= glue::glue(\"{name}\")\n         #subtitle = \"Percentage of shots per area\",\n         #caption = \"Data: Opta via FotMob\\n@RobinWilhelmus\"\n         )+\n    theme(plot.background = element_rect(fill = \"#120E41\", colour = \"#120E41\"),\n          panel.background = element_rect(fill = \"#120E41\", colour = \"#120E41\"),\n          legend.position = \"none\",\n          panel.grid = element_blank(),\n          axis.ticks = element_blank(),\n          axis.text = element_blank(),\n          axis.title = element_blank(),\n          strip.background = element_rect(fill=\"#69C5D2\"),\n          strip.text = element_text(family = \"Spartan-Medium\", color= \"#120E41\"),\n          plot.title = element_text(family = \"Spartan-Bold\", colour=\"#69C5D2\",size=8,hjust=.5),\n          plot.subtitle = element_text(family = \"Spartan-Bold\", colour=\"#69C5D2\",size=4),\n          plot.caption = element_text(family = \"Spartan-Light\", colour=\"#69C5D2\",size=3))\n}\nSo in the title of the plot, I put the team name with glue::glue(). You may have to install this package. Of course you can add more stuff to the plot, like the team logo or the number of shots. Go wild! I changed the label in stat_bin_2d as well, as we don’t have to calculate the percentages per panel as there is only one panel every time we plot.\nNow make the plots\nnested_tmp &lt;- shots_df %&gt;% \n  group_by(team_name) %&gt;% \n  nest() %&gt;% \n  arrange(team_name) %&gt;%\n  mutate(plots = map2(data, team_name, plot_func)) \nAnd now use {patchwork} to wrap the plots together. If you’re not familiar with this packages, read the documentation. It is from the same maker as {ggplot} and therefore works great with it.\nlibrary(patchwork) # we use it multiple times in this piece of code\nwrap_plots(nested_tmp$plots)+ #gather all the plots \n  plot_annotation(\n  title = 'Where do the Eredivisie teams shoot on goal?',\n  subtitle = 'Percentage of shots per area',\n  caption = 'Data: Opta via FotMob\\n@RobinWilhelmus'\n) &\n    plot_annotation(theme = \n  theme(plot.background = element_rect(fill=\"#120E41\",colour = \"#120E41\"),\n        plot.title = element_text(family = \"Spartan-Bold\", colour=\"#69C5D2\",size=18),\n        plot.subtitle = element_text(family = \"Spartan-Bold\", colour=\"#69C5D2\",size=14),\n        plot.caption = element_text(family = \"Spartan-Light\", colour=\"#69C5D2\",size=10)))\n\nAnd as you can see, now the area with the most shots per team is highlighted. It took some extra step, but it was worth it.\nMaybe the two different ways to make this plot is a bit redundant, but I learned some stuff making it both ways so just wanted to share.\nIf you have any questions or want to see a tutorial about a viz you saw online, send me a message on Twitter. And tag me if you make one in your own style and post it to Twitter!"
  },
  {
    "objectID": "ShotsKKD.html",
    "href": "ShotsKKD.html",
    "title": "Shooting",
    "section": "",
    "text": "Shots and xG Eerste Divisie 2023/2024\nTable sorted on NP-Goals and NPxG"
  },
  {
    "objectID": "shinylivetest.html",
    "href": "shinylivetest.html",
    "title": "Joe Cheng’s r-shinylive App in a Quarto document!",
    "section": "",
    "text": "This document contains just the Shiny App source code used in Joe Cheng’s posit::conf(2023) demo (Warning: Large file size, don’t open on mobile!)\nFor a detailed breakdown, please see the index.qmd file.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\nselectInput(\"team\", \"Select team to view\", choices = sort(unique(all$name)),\n            selected = \"Roda JC\")\nsliderInput(\"ngames\", \"Last number of games:\", \n            min = 1, max = 10, value = 10)\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\nDocument Source (minus links):\n---\ntitle: \"Joe Cheng's r-shinylive App in a Quarto document!\"\nformat:\n  html:\n    resources: \n      - shinylive-sw.js\nfilters:\n  - shinylive\n---\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```"
  },
  {
    "objectID": "rankKKD.html",
    "href": "rankKKD.html",
    "title": "xRank",
    "section": "",
    "text": "Expected Points Eerste Divisie 2023/2024\nLeague table sorted on xPoints\n\n\n\nBased on simulating every shot in every match\nLast update: \n2024-05-22\n\n\n\nDownload file"
  }
]