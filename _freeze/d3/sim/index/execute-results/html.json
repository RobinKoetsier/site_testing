{
  "hash": "bcfccdf5dea870d7acdad3224215a6c0",
  "result": {
    "markdown": "---\ntitle: \"RAW HTML CONTENT\"\nformat: html\ncss: bootstrap.min.css\n---\n\n```{html}\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>D3.js - Bar Chart</title>\n  <script src=\"https://d3js.org/d3.v7.min.js\"></script>\n  <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n  <link href=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css\" rel=\"stylesheet\" />\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js\"></script>\n  <style>\n    #dropdown {\n      width: 300px; /* Adjust the width as desired */\n    }\n  </style>\n</head>\n<body>\n  <h1>Bar Chart</h1>\n  <select id=\"dropdown\"></select>\n  <div id=\"chart\"></div>\n\n  <script>\n    // Helper function to load CSV data\n    function loadCSV(filename) {\n      return new Promise(function(resolve, reject) {\n        d3.csv(filename).then(function(data) {\n          resolve(data);\n        }).catch(function(error) {\n          reject(error);\n        });\n      });\n    }\n\n    d3.csv(\"names.csv\").then(function(data) {\n      var uniqueValues = Array.from(new Set(data.map(function(d) { return d['a']; })));\n\n      //uniqueValues = uniqueValues.slice(0, 10); // Limit to the first 10 unique values\n\n      // Create the select2 searchable drop-down\n      $(\"#dropdown\").select2({\n        data: uniqueValues\n      });\n\n      // Event listener for drop-down change\n      $(\"#dropdown\").on(\"change\", function() {\n        var selectedValue = $(this).val();\n\n        // Load CSV data based on selected value\n        loadCSV('Players/'+selectedValue + \".csv\").then(function(filteredData) {\n          // Clear previous chart\n          d3.select(\"#chart\").html(\"\");\n\n          // Define chart dimensions\nvar width = 700;\nvar height = 500;\n\n// Define margin\nvar margin = { top: 25, right: 20, bottom: 50, left: 200 };\n\n// Calculate the inner width and height of the chart\nvar innerWidth = width - margin.left - margin.right;\nvar innerHeight = height - margin.top - margin.bottom;\n\n// Create SVG element\nvar svg = d3.select(\"#chart\")\n  .append(\"svg\")\n  .attr(\"width\", \"100%\") // Set the SVG width to 100% of the container\n  .attr(\"height\", height)\n  .append(\"g\")\n  .attr(\"transform\", \"translate(\" + (width / 2) + \",\" + margin.top + \")\"); // Center the graph horizontally\n\n// Create x-scale\nvar xScale = d3.scaleLinear()\n  .domain([0, d3.max(filteredData, function(d) { return parseFloat(d.Similarity); })])\n  .range([0, innerWidth]);\n\n          // Create y-scale\nvar yScale = d3.scaleBand()\n  .domain(filteredData.map(function(d) { return d['Player 2']; }))\n  .range([0, innerHeight])\n  .padding(0.1);\n\n// Limit y-axis domain to only the values present in the filtered data\nyScale.domain(filteredData.map(function(d) { return d['Player 2']; }));\n\n// Display the data rows sorted by \"Similarity\" in descending order\nfilteredData.sort(function(a, b) {\n  return parseFloat(b.Similarity) - parseFloat(a.Similarity);\n});\n\n// Limit to the top 15 values\nfilteredData = filteredData.slice(0, 20);\n          // Create y-scale\nvar yScale = d3.scaleBand()\n  .domain(filteredData.map(function(d) { return d['Player 2']; }))\n  .range([0, height - 50])\n  .padding(0.1);\n\n// Limit y-axis domain to only the values present in the filtered data\nyScale.domain(filteredData.map(function(d) { return d['Player 2']; }));\n\n// Create x-scale\nvar xScale = d3.scaleLinear()\n  .domain([0, d3.max(filteredData, function(d) { return parseFloat(d.Similarity); })])\n  .range([0, innerWidth]);\n\n// Add chart title\nsvg.append(\"text\")\n  .attr(\"class\", \"chart-title\")\n  .attr(\"x\", innerWidth / 2)\n  .attr(\"y\", -margin.top / 2)\n  .attr(\"text-anchor\", \"middle\")\n  .text(\"Player similar to \" + selectedValue);\n\n// Create bars\nsvg.selectAll(\"rect\")\n  .data(filteredData)\n  .enter()\n  .append(\"rect\")\n  .attr(\"x\", 0) // Move the bars to the left edge of the chart\n  .attr(\"y\", function(d) { return yScale(d['Player 2']); })\n  .attr(\"width\", function(d) { return xScale(parseFloat(d.Similarity)); })\n  .attr(\"height\", yScale.bandwidth())\n  .attr(\"fill\", \"steelblue\");\n\n  \n\n// Create value labels\nsvg.selectAll(\".value-label\")\n  .data(filteredData)\n  .enter()\n  .append(\"text\")\n  .attr(\"class\", \"value-label\")\n  //.attr(\"x\", 40) // Position the labels in the center of each bar\n  .attr(\"y\", function(d) { return yScale(d['Player 2']) + yScale.bandwidth() / 2; }) // Position the labels vertically centered within each bar\n  .attr(\"dy\", \"0.35em\") // Adjust the vertical alignment of the labels\n  .text(function(d) { return parseFloat(d.Similarity).toFixed(2); }) // Display the rounded value of the bar with 2 decimal places\n  .attr(\"text-anchor\", \"right\") // Align the labels to the right\n  .attr(\"fill\", \"white\") // Set the text color to white for better visibility\n  .style(\"font-size\", \"12px\"); // Set the font size to 12 pixels\n\n// Mouseover event handler\nfunction handleMouseOver(d) {\n  d3.select(this)\n    .attr(\"fill\", \"orange\");\n}\n\n// Mouseout event handler\nfunction handleMouseOut(d) {\n  d3.select(this)\n    .attr(\"fill\", \"steelblue\");\n}\n\n// Create y-axis\nsvg.append(\"g\")\n  .call(d3.axisLeft(yScale))\n  .selectAll(\"text\")\n  .attr(\"dy\", \"0.55em\") // Adjust the vertical alignment of the labels\n  .attr(\"x\", -10) // Move the labels slightly to the left\n  .attr(\"text-anchor\", \"end\") // Align the labels to the end of the tick\n // .attr(\"transform\", \"rotate(-20)\"); // Rotate the labels for better readability\n\n\n          // Create x-axis\n          svg.append(\"g\")\n            .attr(\"transform\", \"translate(50, \" + (height - 50) + \")\")\n            .call(d3.axisBottom(xScale));\n\n          \n\n        }).catch(function(error) {\n          console.log(error);\n        });\n      });\n    });\n    \n  </script>\n</body>\n</html>\n\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}